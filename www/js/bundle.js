!function t(e,n,i){function o(s,a){if(!n[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};e[s][0].call(u.exports,function(t){var n=e[s][1][t];return o(n?n:t)},u,u.exports,t,e,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,e,n){!function(){"use strict";function t(e,n){function o(t,e){return function(){return t.apply(e,arguments)}}var r;if(n=n||{},this.trackingClick=!1,this.trackingClickStart=0,this.targetElement=null,this.touchStartX=0,this.touchStartY=0,this.lastTouchIdentifier=0,this.touchBoundary=n.touchBoundary||10,this.layer=e,this.tapDelay=n.tapDelay||200,this.tapTimeout=n.tapTimeout||700,!t.notNeeded(e)){for(var s=["onMouse","onClick","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel"],a=this,l=0,c=s.length;c>l;l++)a[s[l]]=o(a[s[l]],a);i&&(e.addEventListener("mouseover",this.onMouse,!0),e.addEventListener("mousedown",this.onMouse,!0),e.addEventListener("mouseup",this.onMouse,!0)),e.addEventListener("click",this.onClick,!0),e.addEventListener("touchstart",this.onTouchStart,!1),e.addEventListener("touchmove",this.onTouchMove,!1),e.addEventListener("touchend",this.onTouchEnd,!1),e.addEventListener("touchcancel",this.onTouchCancel,!1),Event.prototype.stopImmediatePropagation||(e.removeEventListener=function(t,n,i){var o=Node.prototype.removeEventListener;"click"===t?o.call(e,t,n.hijacked||n,i):o.call(e,t,n,i)},e.addEventListener=function(t,n,i){var o=Node.prototype.addEventListener;"click"===t?o.call(e,t,n.hijacked||(n.hijacked=function(t){t.propagationStopped||n(t)}),i):o.call(e,t,n,i)}),"function"==typeof e.onclick&&(r=e.onclick,e.addEventListener("click",function(t){r(t)},!1),e.onclick=null)}}var n=navigator.userAgent.indexOf("Windows Phone")>=0,i=navigator.userAgent.indexOf("Android")>0&&!n,o=/iP(ad|hone|od)/.test(navigator.userAgent)&&!n,r=o&&/OS 4_\d(_\d)?/.test(navigator.userAgent),s=o&&/OS [6-7]_\d/.test(navigator.userAgent),a=navigator.userAgent.indexOf("BB10")>0;t.prototype.needsClick=function(t){switch(t.nodeName.toLowerCase()){case"button":case"select":case"textarea":if(t.disabled)return!0;break;case"input":if(o&&"file"===t.type||t.disabled)return!0;break;case"label":case"iframe":case"video":return!0}return/\bneedsclick\b/.test(t.className)},t.prototype.needsFocus=function(t){switch(t.nodeName.toLowerCase()){case"textarea":return!0;case"select":return!i;case"input":switch(t.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":return!1}return!t.disabled&&!t.readOnly;default:return/\bneedsfocus\b/.test(t.className)}},t.prototype.sendClick=function(t,e){var n,i;document.activeElement&&document.activeElement!==t&&document.activeElement.blur(),i=e.changedTouches[0],n=document.createEvent("MouseEvents"),n.initMouseEvent(this.determineEventType(t),!0,!0,window,1,i.screenX,i.screenY,i.clientX,i.clientY,!1,!1,!1,!1,0,null),n.forwardedTouchEvent=!0,t.dispatchEvent(n)},t.prototype.determineEventType=function(t){return i&&"select"===t.tagName.toLowerCase()?"mousedown":"click"},t.prototype.focus=function(t){var e;o&&t.setSelectionRange&&0!==t.type.indexOf("date")&&"time"!==t.type&&"month"!==t.type?(e=t.value.length,t.setSelectionRange(e,e)):t.focus()},t.prototype.updateScrollParent=function(t){var e,n;if(e=t.fastClickScrollParent,!e||!e.contains(t)){n=t;do{if(n.scrollHeight>n.offsetHeight){e=n,t.fastClickScrollParent=n;break}n=n.parentElement}while(n)}e&&(e.fastClickLastScrollTop=e.scrollTop)},t.prototype.getTargetElementFromEventTarget=function(t){return t.nodeType===Node.TEXT_NODE?t.parentNode:t},t.prototype.onTouchStart=function(t){var e,n,i;if(t.targetTouches.length>1)return!0;if(e=this.getTargetElementFromEventTarget(t.target),n=t.targetTouches[0],o){if(i=window.getSelection(),i.rangeCount&&!i.isCollapsed)return!0;if(!r){if(n.identifier&&n.identifier===this.lastTouchIdentifier)return t.preventDefault(),!1;this.lastTouchIdentifier=n.identifier,this.updateScrollParent(e)}}return this.trackingClick=!0,this.trackingClickStart=t.timeStamp,this.targetElement=e,this.touchStartX=n.pageX,this.touchStartY=n.pageY,t.timeStamp-this.lastClickTime<this.tapDelay&&t.preventDefault(),!0},t.prototype.touchHasMoved=function(t){var e=t.changedTouches[0],n=this.touchBoundary;return Math.abs(e.pageX-this.touchStartX)>n||Math.abs(e.pageY-this.touchStartY)>n},t.prototype.onTouchMove=function(t){return this.trackingClick?((this.targetElement!==this.getTargetElementFromEventTarget(t.target)||this.touchHasMoved(t))&&(this.trackingClick=!1,this.targetElement=null),!0):!0},t.prototype.findControl=function(t){return void 0!==t.control?t.control:t.htmlFor?document.getElementById(t.htmlFor):t.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea")},t.prototype.onTouchEnd=function(t){var e,n,a,l,c,u=this.targetElement;if(!this.trackingClick)return!0;if(t.timeStamp-this.lastClickTime<this.tapDelay)return this.cancelNextClick=!0,!0;if(t.timeStamp-this.trackingClickStart>this.tapTimeout)return!0;if(this.cancelNextClick=!1,this.lastClickTime=t.timeStamp,n=this.trackingClickStart,this.trackingClick=!1,this.trackingClickStart=0,s&&(c=t.changedTouches[0],u=document.elementFromPoint(c.pageX-window.pageXOffset,c.pageY-window.pageYOffset)||u,u.fastClickScrollParent=this.targetElement.fastClickScrollParent),a=u.tagName.toLowerCase(),"label"===a){if(e=this.findControl(u)){if(this.focus(u),i)return!1;u=e}}else if(this.needsFocus(u))return t.timeStamp-n>100||o&&window.top!==window&&"input"===a?(this.targetElement=null,!1):(this.focus(u),this.sendClick(u,t),o&&"select"===a||(this.targetElement=null,t.preventDefault()),!1);return o&&!r&&(l=u.fastClickScrollParent,l&&l.fastClickLastScrollTop!==l.scrollTop)?!0:(this.needsClick(u)||(t.preventDefault(),this.sendClick(u,t)),!1)},t.prototype.onTouchCancel=function(){this.trackingClick=!1,this.targetElement=null},t.prototype.onMouse=function(t){return this.targetElement?t.forwardedTouchEvent?!0:t.cancelable&&(!this.needsClick(this.targetElement)||this.cancelNextClick)?(t.stopImmediatePropagation?t.stopImmediatePropagation():t.propagationStopped=!0,t.stopPropagation(),t.preventDefault(),!1):!0:!0},t.prototype.onClick=function(t){var e;return this.trackingClick?(this.targetElement=null,this.trackingClick=!1,!0):"submit"===t.target.type&&0===t.detail?!0:(e=this.onMouse(t),e||(this.targetElement=null),e)},t.prototype.destroy=function(){var t=this.layer;i&&(t.removeEventListener("mouseover",this.onMouse,!0),t.removeEventListener("mousedown",this.onMouse,!0),t.removeEventListener("mouseup",this.onMouse,!0)),t.removeEventListener("click",this.onClick,!0),t.removeEventListener("touchstart",this.onTouchStart,!1),t.removeEventListener("touchmove",this.onTouchMove,!1),t.removeEventListener("touchend",this.onTouchEnd,!1),t.removeEventListener("touchcancel",this.onTouchCancel,!1)},t.notNeeded=function(t){var e,n,o,r;if("undefined"==typeof window.ontouchstart)return!0;if(n=+(/Chrome\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]){if(!i)return!0;if(e=document.querySelector("meta[name=viewport]")){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(n>31&&document.documentElement.scrollWidth<=window.outerWidth)return!0}}if(a&&(o=navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/),o[1]>=10&&o[2]>=3&&(e=document.querySelector("meta[name=viewport]")))){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(document.documentElement.scrollWidth<=window.outerWidth)return!0}return"none"===t.style.msTouchAction||"manipulation"===t.style.touchAction?!0:(r=+(/Firefox\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1],r>=27&&(e=document.querySelector("meta[name=viewport]"),e&&(-1!==e.content.indexOf("user-scalable=no")||document.documentElement.scrollWidth<=window.outerWidth))?!0:"none"===t.style.touchAction||"manipulation"===t.style.touchAction)},t.attach=function(e,n){return new t(e,n)},"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return t}):"undefined"!=typeof e&&e.exports?(e.exports=t.attach,e.exports.FastClick=t):window.FastClick=t}()},{}],2:[function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}var o=t("./../libs/jquery/jquery"),r=(i(o),t("./../libs/bootstrap/bootstrap.min.js"),t("./../libs/evothings/evothings"),t("./../libs/sortable/Sortable"),t("fastclick"));(0,r.attachFastClick)(document.body)},{"./../libs/bootstrap/bootstrap.min.js":3,"./../libs/evothings/evothings":4,"./../libs/jquery/jquery":5,"./../libs/sortable/Sortable":6,fastclick:1}],3:[function(t,e,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(t){function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var o=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(o,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){function e(e){return this.each(function(){var n=t(this),o=n.data("bs.alert");o||n.data("bs.alert",o=new i(this)),"string"==typeof e&&o[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.3.6",i.TRANSITION_DURATION=150,i.prototype.close=function(e){function n(){s.detach().trigger("closed.bs.alert").remove()}var o=t(this),r=o.attr("data-target");r||(r=o.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));var s=t(r);e&&e.preventDefault(),s.length||(s=o.closest(".alert")),s.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",n).emulateTransitionEnd(i.TRANSITION_DURATION):n())};var o=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=o,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),+function(t){function e(e){return this.each(function(){var o=t(this),r=o.data("bs.button"),s="object"==("undefined"==typeof e?"undefined":i(e))&&e;r||o.data("bs.button",r=new n(this,s)),"toggle"==e?r.toggle():e&&r.setState(e)})}var n=function r(e,n){this.$element=t(e),this.options=t.extend({},r.DEFAULTS,n),this.isLoading=!1};n.VERSION="3.3.6",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,o=i.is("input")?"val":"html",r=i.data();e+="Text",null==r.resetText&&i.data("resetText",i[o]()),setTimeout(t.proxy(function(){i[o](null==r[e]?this.options[e]:r[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target);i.hasClass("btn")||(i=i.closest(".btn")),e.call(i,"toggle"),t(n.target).is('input[type="radio"]')||t(n.target).is('input[type="checkbox"]')||n.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){function e(e){return this.each(function(){var o=t(this),r=o.data("bs.carousel"),s=t.extend({},n.DEFAULTS,o.data(),"object"==("undefined"==typeof e?"undefined":i(e))&&e),a="string"==typeof e?e:s.slide;r||o.data("bs.carousel",r=new n(this,s)),"number"==typeof e?r.to(e):a?r[a]():s.interval&&r.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e),i="prev"==t&&0===n||"next"==t&&n==this.$items.length-1;if(i&&!this.options.wrap)return e;var o="prev"==t?-1:1,r=(n+o)%this.$items.length;return this.$items.eq(r)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,i){var o=this.$element.find(".item.active"),r=i||this.getItemForDirection(e,o),s=this.interval,a="next"==e?"left":"right",l=this;if(r.hasClass("active"))return this.sliding=!1;var c=r[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:a});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,s&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=t(this.$indicators.children()[this.getItemIndex(r)]);d&&d.addClass("active")}var f=t.Event("slid.bs.carousel",{relatedTarget:c,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(r.addClass(e),r[0].offsetWidth,o.addClass(a),r.addClass(a),o.one("bsTransitionEnd",function(){r.removeClass([e,a].join(" ")).addClass("active"),o.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(f)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(o.removeClass("active"),r.addClass("active"),this.sliding=!1,this.$element.trigger(f)),s&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var r=function s(n){var i,s=t(this),o=t(s.attr("data-target")||(i=s.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var r=t.extend({},o.data(),s.data()),a=s.attr("data-slide-to");a&&(r.interval=!1),e.call(o,r),a&&o.data("bs.carousel").to(a),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){function e(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function n(e){return this.each(function(){var n=t(this),r=n.data("bs.collapse"),s=t.extend({},o.DEFAULTS,n.data(),"object"==("undefined"==typeof e?"undefined":i(e))&&e);!r&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),r||n.data("bs.collapse",r=new o(this,s)),"string"==typeof e&&r[e]()})}var o=function s(e,n){this.$element=t(e),this.options=t.extend({},s.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.6",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"),e&&e.transitioning))){var r=t.Event("show.bs.collapse");if(this.$element.trigger(r),!r.isDefaultPrevented()){i&&i.length&&(n.call(i,"hide"),e||i.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[s](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(o.TRANSITION_DURATION):i.call(this)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,i){var o=t(i);this.addAriaAndCollapsedClass(e(o),o)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var r=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=r,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(i){var o=t(this);o.attr("data-target")||i.preventDefault();var r=e(o),s=r.data("bs.collapse"),a=s?"toggle":o.data();n.call(r,a)})}(jQuery),+function(t){function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function n(n){n&&3===n.which||(t(o).remove(),t(r).each(function(){var i=t(this),o=e(i),r={relatedTarget:this};o.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(o[0],n.target)||(o.trigger(n=t.Event("hide.bs.dropdown",r)),n.isDefaultPrevented()||(i.attr("aria-expanded","false"),o.removeClass("open").trigger(t.Event("hidden.bs.dropdown",r)))))}))}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new s(this)),"string"==typeof e&&i[e].call(n)})}var o=".dropdown-backdrop",r='[data-toggle="dropdown"]',s=function(e){t(e).on("click.bs.dropdown",this.toggle)};s.VERSION="3.3.6",s.prototype.toggle=function(i){var o=t(this);if(!o.is(".disabled, :disabled")){var r=e(o),s=r.hasClass("open");if(n(),!s){"ontouchstart"in document.documentElement&&!r.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var a={relatedTarget:this};if(r.trigger(i=t.Event("show.bs.dropdown",a)),i.isDefaultPrevented())return;o.trigger("focus").attr("aria-expanded","true"),r.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},s.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var i=t(this);if(n.preventDefault(),n.stopPropagation(),!i.is(".disabled, :disabled")){var o=e(i),s=o.hasClass("open");if(!s&&27!=n.which||s&&27==n.which)return 27==n.which&&o.find(r).trigger("focus"),i.trigger("click");var a=" li:not(.disabled):visible a",l=o.find(".dropdown-menu"+a);if(l.length){var c=l.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",r,s.prototype.toggle).on("keydown.bs.dropdown.data-api",r,s.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",s.prototype.keydown)}(jQuery),+function(t){function e(e,o){return this.each(function(){var r=t(this),s=r.data("bs.modal"),a=t.extend({},n.DEFAULTS,r.data(),"object"==("undefined"==typeof e?"undefined":i(e))&&e);s||r.data("bs.modal",s=new n(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this,o=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(o),this.isShown||o.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var o=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),o&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:e});o?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(n.TRANSITION_DURATION):i.$element.trigger("focus").trigger(r)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var i=this,o=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&o;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+o).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;r?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):s()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),o=i.attr("href"),r=t(i.attr("data-target")||o&&o.replace(/.*(?=#[^\s]+$)/,"")),s=r.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(o)&&o},r.data(),i.data());i.is("a")&&n.preventDefault(),r.one("show.bs.modal",function(t){t.isDefaultPrevented()||r.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(r,s,this)})}(jQuery),+function(t){function e(e){return this.each(function(){var o=t(this),r=o.data("bs.tooltip"),s="object"==("undefined"==typeof e?"undefined":i(e))&&e;(r||!/destroy|hide/.test(e))&&(r||o.data("bs.tooltip",r=new n(this,s)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,i){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var o=this.options.trigger.split(" "),r=o.length;r--;){var s=o[r];if("click"==s)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",l="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),n.isInStateTrue()?void 0:(clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide())},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){
this.$element.trigger(e);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!i)return;var o=this,r=this.tip(),s=this.getUID(this.type);this.setContent(),r.attr("id",s),this.$element.attr("aria-describedby",s),this.options.animation&&r.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,c=l.test(a);c&&(a=a.replace(l,"")||"top"),r.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var u=this.getPosition(),d=r[0].offsetWidth,f=r[0].offsetHeight;if(c){var p=a,h=this.getPosition(this.$viewport);a="bottom"==a&&u.bottom+f>h.bottom?"top":"top"==a&&u.top-f<h.top?"bottom":"right"==a&&u.right+d>h.width?"left":"left"==a&&u.left-d<h.left?"right":a,r.removeClass(p).addClass(a)}var g=this.getCalculatedOffset(a,u,d,f);this.applyPlacement(g,a);var v=function(){var t=o.hoverState;o.$element.trigger("shown.bs."+o.type),o.hoverState=null,"out"==t&&o.leave(o)};t.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",v).emulateTransitionEnd(n.TRANSITION_DURATION):v()}},n.prototype.applyPlacement=function(e,n){var i=this.tip(),o=i[0].offsetWidth,r=i[0].offsetHeight,s=parseInt(i.css("margin-top"),10),a=parseInt(i.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),e.top+=s,e.left+=a,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var l=i[0].offsetWidth,c=i[0].offsetHeight;"top"==n&&c!=r&&(e.top=e.top+r-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var d=/top|bottom/.test(n),f=d?2*u.left-o+l:2*u.top-r+c,p=d?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(f,i[0][p],d)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function i(){"in"!=o.hoverState&&r.detach(),o.$element.removeAttr("aria-describedby").trigger("hidden.bs."+o.type),e&&e()}var o=this,r=t(this.$tip),s=t.Event("hide.bs."+this.type);return this.$element.trigger(s),s.isDefaultPrevented()?void 0:(r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",i).emulateTransitionEnd(n.TRANSITION_DURATION):i(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],i="BODY"==n.tagName,o=n.getBoundingClientRect();null==o.width&&(o=t.extend({},o,{width:o.right-o.left,height:o.bottom-o.top}));var r=i?{top:0,left:0}:e.offset(),s={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},a=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},o,s,a,r)},n.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,i){var o={top:0,left:0};if(!this.$viewport)return o;var r=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-r-s.scroll,l=e.top+r-s.scroll+i;a<s.top?o.top=s.top-a:l>s.top+s.height&&(o.top=s.top+s.height-l)}else{var c=e.left-r,u=e.left+r+n;c<s.left?o.left=s.left-c:u>s.right&&(o.left=s.left+s.width-u)}return o},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),+function(t){function e(e){return this.each(function(){var o=t(this),r=o.data("bs.popover"),s="object"==("undefined"==typeof e?"undefined":i(e))&&e;(r||!/destroy|hide/.test(e))&&(r||o.data("bs.popover",r=new n(this,s)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.6",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),+function(t){function e(n,i){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var o=t(this),r=o.data("bs.scrollspy"),s="object"==("undefined"==typeof n?"undefined":i(n))&&n;r||o.data("bs.scrollspy",r=new e(this,s)),"string"==typeof n&&r[n]()})}e.VERSION="3.3.6",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",i=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",i=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),o=e.data("target")||e.attr("href"),r=/^#./.test(o)&&t(o);return r&&r.length&&r.is(":visible")&&[[r[n]().top+i,o]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),o=this.offsets,r=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return s!=(t=r[r.length-1])&&this.activate(t);if(s&&e<o[0])return this.activeTarget=null,this.clear();for(t=o.length;t--;)s!=r[t]&&e>=o[t]&&(void 0===o[t+1]||e<o[t+1])&&this.activate(r[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){function e(e){return this.each(function(){var i=t(this),o=i.data("bs.tab");o||i.data("bs.tab",o=new n(this)),"string"==typeof e&&o[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var o=n.find(".active:last a"),r=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:o[0]});if(o.trigger(r),e.trigger(s),!s.isDefaultPrevented()&&!r.isDefaultPrevented()){var a=t(i);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){o.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:o[0]})})}}},n.prototype.activate=function(e,i,o){function r(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),o&&o()}var s=i.find("> .active"),a=o&&t.support.transition&&(s.length&&s.hasClass("fade")||!!i.find("> .fade").length);s.length&&a?s.one("bsTransitionEnd",r).emulateTransitionEnd(n.TRANSITION_DURATION):r(),s.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var o=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',o).on("click.bs.tab.data-api",'[data-toggle="pill"]',o)}(jQuery),+function(t){function e(e){return this.each(function(){var o=t(this),r=o.data("bs.affix"),s="object"==("undefined"==typeof e?"undefined":i(e))&&e;r||o.data("bs.affix",r=new n(this,s)),"string"==typeof e&&r[e]()})}var n=function r(e,n){this.options=t.extend({},r.DEFAULTS,n),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.6",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,i){var o=this.$target.scrollTop(),r=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return n>o?"top":!1;if("bottom"==this.affixed)return null!=n?o+this.unpin<=r.top?!1:"bottom":t-i>=o+s?!1:"bottom";var a=null==this.affixed,l=a?o:r.top,c=a?s:e;return null!=n&&n>=o?"top":null!=i&&l+c>=t-i?"bottom":!1},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,r=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=("undefined"==typeof o?"undefined":i(o))&&(s=r=o),"function"==typeof r&&(r=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var l=this.getState(a,e,r,s);if(this.affixed!=l){null!=this.unpin&&this.$element.css("top","");var c="affix"+(l?"-"+l:""),u=t.Event(c+".bs.affix");if(this.$element.trigger(u),u.isDefaultPrevented())return;this.affixed=l,this.unpin="bottom"==l?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(c).trigger(c.replace("affix","affixed")+".bs.affix")}"bottom"==l&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery)},{}],4:[function(t,e,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};evothings=window.evothings||{},function(){var t=0,e={},n=[];return evothings.loadScript=function(i,o){if(e[i])return void(o&&o());e[i]="loadingstarted",++t;var r=document.createElement("script");r.type="text/javascript",r.src=i,r.onload=function(){if(e[i]="loadingcomplete",--t,o&&o(),0==t){for(var r=0;r<n.length;++r)n[r]();n=[]}},r.onerror=function(){throw"Could not load script '"+i+"'"},document.head.appendChild(r)},evothings.scriptsLoaded=function(i){0!=Object.keys(e).length&&0==t?i():n.push(i)},evothings.printObject=function(t,e){function n(t,o){var r=new Array(o+1).join("  ");for(var s in t)if(t.hasOwnProperty(s)){var a=t[s];"object"==("undefined"==typeof a?"undefined":i(a))?(e(r+s+":"),n(a,o+1)):e(r+s+": "+a)}}e=e||console.log,n(t,0)},evothings.os={},evothings.os.isIOS=function(){return/iP(hone|ad|od)/.test(navigator.userAgent)},evothings.os.isIOS7=function(){return/iP(hone|ad|od).*OS 7/.test(navigator.userAgent)},evothings.os.isAndroid=function(){return/Android|android/.test(navigator.userAgent)},evothings.os.isWP=function(){return/Windows Phone/.test(navigator.userAgent)},evothings}(),window.addEventListener("DOMContentLoaded",function(t){evothings.os.isIOS7()&&(document.body.style.fontSize="20pt")})},{}],5:[function(t,e,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,n){"object"==("undefined"==typeof e?"undefined":i(e))&&"object"==i(e.exports)?e.exports=t.document?n(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(t)}("undefined"!=typeof window?window:void 0,function(t,e){function n(t){var e=t.length,n=tt.type(t);return"function"===n||tt.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function o(t,e,n){if(tt.isFunction(e))return tt.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return tt.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(lt.test(e))return tt.filter(e,t,n);e=tt.filter(e,t)}return tt.grep(t,function(t){return Y.call(e,t)>=0!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function s(t){var e=gt[t]={};return tt.each(t.match(ht)||[],function(t,n){e[n]=!0}),e}function a(){K.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1),tt.ready()}function l(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=tt.expando+Math.random()}function c(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(xt,"-$1").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:wt.test(n)?tt.parseJSON(n):n}catch(o){}bt.set(t,e,n)}else n=void 0;return n}function u(){return!0}function d(){return!1}function f(){try{return K.activeElement}catch(t){}}function p(t,e){return tt.nodeName(t,"table")&&tt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function h(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function g(t){var e=Pt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function v(t,e){for(var n=0,i=t.length;i>n;n++)yt.set(t[n],"globalEval",!e||yt.get(e[n],"globalEval"))}function m(t,e){var n,i,o,r,s,a,l,c;if(1===e.nodeType){if(yt.hasData(t)&&(r=yt.access(t),s=yt.set(e,r),c=r.events)){delete s.handle,s.events={};for(o in c)for(n=0,i=c[o].length;i>n;n++)tt.event.add(e,o,c[o][n])}bt.hasData(t)&&(a=bt.access(t),l=tt.extend({},a),bt.set(e,l))}}function y(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&tt.nodeName(t,e)?tt.merge([t],n):n}function b(t,e){var n=e.nodeName.toLowerCase();"input"===n&&St.test(t.type)?e.checked=t.checked:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}function w(e,n){var i,o=tt(n.createElement(e)).appendTo(n.body),r=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(o[0]))?i.display:tt.css(o[0],"display");return o.detach(),r}function x(t){var e=K,n=Mt[t];return n||(n=w(t,e),"none"!==n&&n||(Ft=(Ft||tt("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Ft[0].contentDocument,e.write(),e.close(),n=w(t,e),Ft.detach()),Mt[t]=n),n}function T(t,e,n){var i,o,r,s,a=t.style;return n=n||Ut(t),n&&(s=n.getPropertyValue(e)||n[e]),n&&(""!==s||tt.contains(t.ownerDocument,t)||(s=tt.style(t,e)),Wt.test(s)&&Bt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function C(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function E(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),i=e,o=Gt.length;o--;)if(e=Gt[o]+n,e in t)return e;return i}function S(t,e,n){var i=zt.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function k(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>r;r+=2)"margin"===n&&(s+=tt.css(t,n+Ct[r],!0,o)),i?("content"===n&&(s-=tt.css(t,"padding"+Ct[r],!0,o)),"margin"!==n&&(s-=tt.css(t,"border"+Ct[r]+"Width",!0,o))):(s+=tt.css(t,"padding"+Ct[r],!0,o),"padding"!==n&&(s+=tt.css(t,"border"+Ct[r]+"Width",!0,o)));return s}function D(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,r=Ut(t),s="border-box"===tt.css(t,"boxSizing",!1,r);if(0>=o||null==o){if(o=T(t,e,r),(0>o||null==o)&&(o=t.style[e]),Wt.test(o))return o;i=s&&(J.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+k(t,e,n||(s?"border":"content"),i,r)+"px"}function N(t,e){for(var n,i,o,r=[],s=0,a=t.length;a>s;s++)i=t[s],i.style&&(r[s]=yt.get(i,"olddisplay"),n=i.style.display,e?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Et(i)&&(r[s]=yt.access(i,"olddisplay",x(i.nodeName)))):(o=Et(i),"none"===n&&o||yt.set(i,"olddisplay",o?n:tt.css(i,"display"))));for(s=0;a>s;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[s]||"":"none"));return t}function $(t,e,n,i,o){return new $.prototype.init(t,e,n,i,o)}function A(){return setTimeout(function(){Jt=void 0}),Jt=tt.now()}function j(t,e){var n,i=0,o={height:t};for(e=e?1:0;4>i;i+=2-e)n=Ct[i],o["margin"+n]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function O(t,e,n){for(var i,o=(ie[e]||[]).concat(ie["*"]),r=0,s=o.length;s>r;r++)if(i=o[r].call(n,e,t))return i}function L(t,e,n){var i,o,r,s,a,l,c,u,d=this,f={},p=t.style,h=t.nodeType&&Et(t),g=yt.get(t,"fxshow");n.queue||(a=tt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,tt.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=tt.css(t,"display"),u="none"===c?yt.get(t,"olddisplay")||x(t.nodeName):c,"inline"===u&&"none"===tt.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(i in e)if(o=e[i],Zt.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;h=!0}f[i]=g&&g[i]||tt.style(t,i)}else c=void 0;if(tt.isEmptyObject(f))"inline"===("none"===c?x(t.nodeName):c)&&(p.display=c);else{g?"hidden"in g&&(h=g.hidden):g=yt.access(t,"fxshow",{}),r&&(g.hidden=!h),h?tt(t).show():d.done(function(){tt(t).hide()}),d.done(function(){var e;yt.remove(t,"fxshow");for(e in f)tt.style(t,e,f[e])});for(i in f)s=O(h?g[i]:0,i,d),i in g||(g[i]=s.start,h&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function I(t,e){var n,i,o,r,s;for(n in t)if(i=tt.camelCase(n),o=e[i],r=t[n],tt.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),s=tt.cssHooks[i],s&&"expand"in s){r=s.expand(r),delete t[i];for(n in r)n in t||(t[n]=r[n],e[n]=o)}else e[i]=o}function _(t,e,n){var i,o,r=0,s=ne.length,a=tt.Deferred().always(function(){delete l.elem}),l=function d(){if(o)return!1;for(var e=Jt||A(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,r=1-i,s=0,d=c.tweens.length;d>s;s++)c.tweens[s].run(r);return a.notifyWith(t,[c,r,n]),1>r&&d?n:(a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:tt.extend({},e),opts:tt.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Jt||A(),duration:n.duration,tweens:[],createTween:function(e,n){var i=tt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;i>n;n++)c.tweens[n].run(1);return e?a.resolveWith(t,[c,e]):a.rejectWith(t,[c,e]),this}}),u=c.props;for(I(u,c.opts.specialEasing);s>r;r++)if(i=ne[r].call(c,t,u,c.opts))return i;return tt.map(u,O,c),tt.isFunction(c.opts.start)&&c.opts.start.call(t,c),tt.fx.timer(tt.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function R(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(ht)||[];if(tt.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function P(t,e,n,i){function o(a){var l;return r[a]=!0,tt.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||s||r[c]?s?!(l=c):void 0:(e.dataTypes.unshift(c),o(c),!1)}),l}var r={},s=t===Te;return o(e.dataTypes[0])||!r["*"]&&o("*")}function H(t,e){var n,i,o=tt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&tt.extend(!0,t,i),t}function q(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}return r?(r!==l[0]&&l.unshift(r),n[r]):void 0}function F(t,e,n,i){var o,r,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(s=c[l+" "+r]||c["* "+r],!s)for(o in c)if(a=o.split(" "),a[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[o]:c[o]!==!0&&(r=a[0],u.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(d){return{state:"parsererror",error:s?d:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}function M(t,e,n,o){var r;if(tt.isArray(e))tt.each(e,function(e,r){n||ke.test(t)?o(t,r):M(t+"["+("object"==("undefined"==typeof r?"undefined":i(r))?e:"")+"]",r,n,o)});else if(n||"object"!==tt.type(e))o(t,e);else for(r in e)M(t+"["+r+"]",e[r],n,o)}function B(t){return tt.isWindow(t)?t:9===t.nodeType&&t.defaultView}var W=[],U=W.slice,X=W.concat,z=W.push,Y=W.indexOf,V={},Q=V.toString,G=V.hasOwnProperty,J={},K=t.document,Z="2.1.1",tt=function Fe(t,e){return new Fe.fn.init(t,e)},et=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,nt=/^-ms-/,it=/-([\da-z])/gi,ot=function(t,e){return e.toUpperCase()};tt.fn=tt.prototype={jquery:Z,constructor:tt,selector:"",length:0,toArray:function(){return U.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:U.call(this)},pushStack:function(t){var e=tt.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return tt.each(this,t,e)},map:function(t){return this.pushStack(tt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(U.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:z,sort:W.sort,splice:W.splice},tt.extend=tt.fn.extend=function(){var t,e,n,o,r,s,a=arguments[0]||{},l=1,c=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[l]||{},l++),"object"==("undefined"==typeof a?"undefined":i(a))||tt.isFunction(a)||(a={}),l===c&&(a=this,l--);c>l;l++)if(null!=(t=arguments[l]))for(e in t)n=a[e],o=t[e],a!==o&&(u&&o&&(tt.isPlainObject(o)||(r=tt.isArray(o)))?(r?(r=!1,s=n&&tt.isArray(n)?n:[]):s=n&&tt.isPlainObject(n)?n:{},a[e]=tt.extend(u,s,o)):void 0!==o&&(a[e]=o));return a},tt.extend({expando:"jQuery"+(Z+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===tt.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!tt.isArray(t)&&t-parseFloat(t)>=0},isPlainObject:function(t){return"object"!==tt.type(t)||t.nodeType||tt.isWindow(t)?!1:!t.constructor||G.call(t.constructor.prototype,"isPrototypeOf")},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==("undefined"==typeof t?"undefined":i(t))||"function"==typeof t?V[Q.call(t)]||"object":"undefined"==typeof t?"undefined":i(t)},globalEval:function(t){var e,n=eval;t=tt.trim(t),t&&(1===t.indexOf("use strict")?(e=K.createElement("script"),e.text=t,K.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(nt,"ms-").replace(it,ot)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var o,r=0,s=t.length,a=n(t);if(i){if(a)for(;s>r&&(o=e.apply(t[r],i),o!==!1);r++);else for(r in t)if(o=e.apply(t[r],i),o===!1)break}else if(a)for(;s>r&&(o=e.call(t[r],r,t[r]),o!==!1);r++);else for(r in t)if(o=e.call(t[r],r,t[r]),o===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(et,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?tt.merge(i,"string"==typeof t?[t]:t):z.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:Y.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;n>i;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i,o=[],r=0,s=t.length,a=!n;s>r;r++)i=!e(t[r],r),i!==a&&o.push(t[r]);return o},map:function(t,e,i){var o,r=0,s=t.length,a=n(t),l=[];if(a)for(;s>r;r++)o=e(t[r],r,i),null!=o&&l.push(o);else for(r in t)o=e(t[r],r,i),null!=o&&l.push(o);return X.apply([],l)},guid:1,proxy:function(t,e){var n,i,o;return"string"==typeof e&&(n=t[e],e=t,t=n),tt.isFunction(t)?(i=U.call(arguments,2),o=function(){return t.apply(e||this,i.concat(U.call(arguments)))},o.guid=t.guid=t.guid||tt.guid++,o):void 0},now:Date.now,support:J}),tt.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){V["[object "+e+"]"]=e.toLowerCase()});var rt=function(t){function e(t,e,n,i){var o,r,s,a,l,c,u,f,h,g;if((e?e.ownerDocument||e:M)!==L&&O(e),e=e||L,n=n||[],!t||"string"!=typeof t)return n;if(1!==(a=e.nodeType)&&9!==a)return[];if(_&&!i){if(o=bt.exec(t))if(s=o[1]){if(9===a){if(r=e.getElementById(s),!r||!r.parentNode)return n;if(r.id===s)return n.push(r),n}else if(e.ownerDocument&&(r=e.ownerDocument.getElementById(s))&&q(e,r)&&r.id===s)return n.push(r),n}else{if(o[2])return tt.apply(n,e.getElementsByTagName(t)),n;if((s=o[3])&&T.getElementsByClassName&&e.getElementsByClassName)return tt.apply(n,e.getElementsByClassName(s)),n}if(T.qsa&&(!R||!R.test(t))){if(f=u=F,h=e,g=9===a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(c=k(t),(u=e.getAttribute("id"))?f=u.replace(xt,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",l=c.length;l--;)c[l]=f+p(c[l]);h=wt.test(t)&&d(e.parentNode)||e,g=c.join(",")}if(g)try{return tt.apply(n,h.querySelectorAll(g)),n}catch(v){}finally{u||e.removeAttribute("id")}}}return N(t.replace(ct,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>C.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function o(t){return t[F]=!0,t}function r(t){var e=L.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var n=t.split("|"),i=t.length;i--;)C.attrHandle[n[i]]=e}function a(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||Q)-(~t.sourceIndex||Q);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function l(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function c(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return o(function(e){return e=+e,o(function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function d(t){return t&&i(t.getElementsByTagName)!==V&&t}function f(){}function p(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function h(t,e,n){var i=e.dir,o=n&&"parentNode"===i,r=W++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,r)}:function(e,n,s){var a,l,c=[B,r];if(s){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||o){if(l=e[F]||(e[F]={}),(a=l[i])&&a[0]===B&&a[1]===r)return c[2]=a[2];if(l[i]=c,c[2]=t(e,n,s))return!0}}}function g(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function v(t,n,i){for(var o=0,r=n.length;r>o;o++)e(t,n[o],i);return i}function m(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;l>a;a++)(r=t[a])&&(!n||n(r,i,o))&&(s.push(r),c&&e.push(a));return s}function y(t,e,n,i,r,s){return i&&!i[F]&&(i=y(i)),r&&!r[F]&&(r=y(r,s)),o(function(o,s,a,l){var c,u,d,f=[],p=[],h=s.length,g=o||v(e||"*",a.nodeType?[a]:a,[]),y=!t||!o&&e?g:m(g,f,t,a,l),b=n?r||(o?t:h||i)?[]:s:y;if(n&&n(y,b,a,l),i)for(c=m(b,p),i(c,[],a,l),u=c.length;u--;)(d=c[u])&&(b[p[u]]=!(y[p[u]]=d));if(o){if(r||t){if(r){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);r(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=r?nt.call(o,d):f[u])>-1&&(o[c]=!(s[c]=d));
}}else b=m(b===s?b.splice(h,b.length):b),r?r(null,s,b,l):tt.apply(s,b)})}function b(t){for(var e,n,i,o=t.length,r=C.relative[t[0].type],s=r||C.relative[" "],a=r?1:0,l=h(function(t){return t===e},s,!0),c=h(function(t){return nt.call(e,t)>-1},s,!0),u=[function(t,n,i){return!r&&(i||n!==$)||((e=n).nodeType?l(t,n,i):c(t,n,i))}];o>a;a++)if(n=C.relative[t[a].type])u=[h(g(u),n)];else{if(n=C.filter[t[a].type].apply(null,t[a].matches),n[F]){for(i=++a;o>i&&!C.relative[t[i].type];i++);return y(a>1&&g(u),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ct,"$1"),n,i>a&&b(t.slice(a,i)),o>i&&b(t=t.slice(i)),o>i&&p(t))}u.push(n)}return g(u)}function w(t,n){var i=n.length>0,r=t.length>0,s=function(o,s,a,l,c){var u,d,f,p=0,h="0",g=o&&[],v=[],y=$,b=o||r&&C.find.TAG("*",c),w=B+=null==y?1:Math.random()||.1,x=b.length;for(c&&($=s!==L&&s);h!==x&&null!=(u=b[h]);h++){if(r&&u){for(d=0;f=t[d++];)if(f(u,s,a)){l.push(u);break}c&&(B=w)}i&&((u=!f&&u)&&p--,o&&g.push(u))}if(p+=h,i&&h!==p){for(d=0;f=n[d++];)f(g,v,s,a);if(o){if(p>0)for(;h--;)g[h]||v[h]||(v[h]=K.call(l));v=m(v)}tt.apply(l,v),c&&!o&&v.length>0&&p+n.length>1&&e.uniqueSort(l)}return c&&(B=w,$=y),g};return i?o(s):s}var x,T,C,E,S,k,D,N,$,A,j,O,L,I,_,R,P,H,q,F="sizzle"+-new Date,M=t.document,B=0,W=0,U=n(),X=n(),z=n(),Y=function(t,e){return t===e&&(j=!0),0},V="undefined",Q=1<<31,G={}.hasOwnProperty,J=[],K=J.pop,Z=J.push,tt=J.push,et=J.slice,nt=J.indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(this[e]===t)return e;return-1},it="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ot="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",st=rt.replace("w","w#"),at="\\["+ot+"*("+rt+")(?:"+ot+"*([*^$|!~]?=)"+ot+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+st+"))|)"+ot+"*\\]",lt=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+at+")*)|.*)\\)|)",ct=new RegExp("^"+ot+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ot+"+$","g"),ut=new RegExp("^"+ot+"*,"+ot+"*"),dt=new RegExp("^"+ot+"*([>+~]|"+ot+")"+ot+"*"),ft=new RegExp("="+ot+"*([^\\]'\"]*?)"+ot+"*\\]","g"),pt=new RegExp(lt),ht=new RegExp("^"+st+"$"),gt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+at),PSEUDO:new RegExp("^"+lt),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ot+"*(even|odd|(([+-]|)(\\d*)n|)"+ot+"*(?:([+-]|)"+ot+"*(\\d+)|))"+ot+"*\\)|)","i"),bool:new RegExp("^(?:"+it+")$","i"),needsContext:new RegExp("^"+ot+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ot+"*((?:-\\d)?\\d*)"+ot+"*\\)|)(?=[^-]|$)","i")},vt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,yt=/^[^{]+\{\s*\[native \w/,bt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wt=/[+~]/,xt=/'|\\/g,Tt=new RegExp("\\\\([\\da-f]{1,6}"+ot+"?|("+ot+")|.)","ig"),Ct=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)};try{tt.apply(J=et.call(M.childNodes),M.childNodes),J[M.childNodes.length].nodeType}catch(Et){tt={apply:J.length?function(t,e){Z.apply(t,et.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}T=e.support={},S=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},O=e.setDocument=function(t){var e,n=t?t.ownerDocument||t:M,o=n.defaultView;return n!==L&&9===n.nodeType&&n.documentElement?(L=n,I=n.documentElement,_=!S(n),o&&o!==o.top&&(o.addEventListener?o.addEventListener("unload",function(){O()},!1):o.attachEvent&&o.attachEvent("onunload",function(){O()})),T.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),T.getElementsByTagName=r(function(t){return t.appendChild(n.createComment("")),!t.getElementsByTagName("*").length}),T.getElementsByClassName=yt.test(n.getElementsByClassName)&&r(function(t){return t.innerHTML="<div class='a'></div><div class='a i'></div>",t.firstChild.className="i",2===t.getElementsByClassName("i").length}),T.getById=r(function(t){return I.appendChild(t).id=F,!n.getElementsByName||!n.getElementsByName(F).length}),T.getById?(C.find.ID=function(t,e){if(i(e.getElementById)!==V&&_){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},C.filter.ID=function(t){var e=t.replace(Tt,Ct);return function(t){return t.getAttribute("id")===e}}):(delete C.find.ID,C.filter.ID=function(t){var e=t.replace(Tt,Ct);return function(t){var n=i(t.getAttributeNode)!==V&&t.getAttributeNode("id");return n&&n.value===e}}),C.find.TAG=T.getElementsByTagName?function(t,e){return i(e.getElementsByTagName)!==V?e.getElementsByTagName(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},C.find.CLASS=T.getElementsByClassName&&function(t,e){return i(e.getElementsByClassName)!==V&&_?e.getElementsByClassName(t):void 0},P=[],R=[],(T.qsa=yt.test(n.querySelectorAll))&&(r(function(t){t.innerHTML="<select msallowclip=''><option selected=''></option></select>",t.querySelectorAll("[msallowclip^='']").length&&R.push("[*^$]="+ot+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||R.push("\\["+ot+"*(?:value|"+it+")"),t.querySelectorAll(":checked").length||R.push(":checked")}),r(function(t){var e=n.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&R.push("name"+ot+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||R.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),R.push(",.*:")})),(T.matchesSelector=yt.test(H=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&r(function(t){T.disconnectedMatch=H.call(t,"div"),H.call(t,"[s!='']:x"),P.push("!=",lt)}),R=R.length&&new RegExp(R.join("|")),P=P.length&&new RegExp(P.join("|")),e=yt.test(I.compareDocumentPosition),q=e||yt.test(I.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},Y=e?function(t,e){if(t===e)return j=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!T.sortDetached&&e.compareDocumentPosition(t)===i?t===n||t.ownerDocument===M&&q(M,t)?-1:e===n||e.ownerDocument===M&&q(M,e)?1:A?nt.call(A,t)-nt.call(A,e):0:4&i?-1:1)}:function(t,e){if(t===e)return j=!0,0;var i,o=0,r=t.parentNode,s=e.parentNode,l=[t],c=[e];if(!r||!s)return t===n?-1:e===n?1:r?-1:s?1:A?nt.call(A,t)-nt.call(A,e):0;if(r===s)return a(t,e);for(i=t;i=i.parentNode;)l.unshift(i);for(i=e;i=i.parentNode;)c.unshift(i);for(;l[o]===c[o];)o++;return o?a(l[o],c[o]):l[o]===M?-1:c[o]===M?1:0},n):L},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==L&&O(t),n=n.replace(ft,"='$1']"),!(!T.matchesSelector||!_||P&&P.test(n)||R&&R.test(n)))try{var i=H.call(t,n);if(i||T.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(o){}return e(n,L,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==L&&O(t),q(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==L&&O(t);var n=C.attrHandle[e.toLowerCase()],i=n&&G.call(C.attrHandle,e.toLowerCase())?n(t,e,!_):void 0;return void 0!==i?i:T.attributes||!_?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,o=0;if(j=!T.detectDuplicates,A=!T.sortStable&&t.slice(0),t.sort(Y),j){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return A=null,t},E=e.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=E(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=E(e);return n},C=e.selectors={cacheLength:50,createPseudo:o,match:gt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Tt,Ct),t[3]=(t[3]||t[4]||t[5]||"").replace(Tt,Ct),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return gt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&pt.test(n)&&(e=k(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Tt,Ct).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=U[t+" "];return e||(e=new RegExp("(^|"+ot+")"+t+"("+ot+"|$)"))&&U(t,function(t){return e.test("string"==typeof t.className&&t.className||i(t.getAttribute)!==V&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(o){var r=e.attr(o,t);return null==r?"!="===n:n?(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r+" ").indexOf(i)>-1:"|="===n?r===i||r.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var c,u,d,f,p,h,g=r!==s?"nextSibling":"previousSibling",v=e.parentNode,m=a&&e.nodeName.toLowerCase(),y=!l&&!a;if(v){if(r){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===m:1===d.nodeType)return!1;h=g="only"===t&&!h&&"nextSibling"}return!0}if(h=[s?v.firstChild:v.lastChild],s&&y){for(u=v[F]||(v[F]={}),c=u[t]||[],p=c[0]===B&&c[1],f=c[0]===B&&c[2],d=p&&v.childNodes[p];d=++p&&d&&d[g]||(f=p=0)||h.pop();)if(1===d.nodeType&&++f&&d===e){u[t]=[B,p,f];break}}else if(y&&(c=(e[F]||(e[F]={}))[t])&&c[0]===B)f=c[1];else for(;(d=++p&&d&&d[g]||(f=p=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==m:1!==d.nodeType)||!++f||(y&&((d[F]||(d[F]={}))[t]=[B,f]),d!==e)););return f-=o,f===i||f%i===0&&f/i>=0}}},PSEUDO:function(t,n){var i,r=C.pseudos[t]||C.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return r[F]?r(n):r.length>1?(i=[t,t,"",n],C.setFilters.hasOwnProperty(t.toLowerCase())?o(function(t,e){for(var i,o=r(t,n),s=o.length;s--;)i=nt.call(t,o[s]),t[i]=!(e[i]=o[s])}):function(t){return r(t,0,i)}):r}},pseudos:{not:o(function(t){var e=[],n=[],i=D(t.replace(ct,"$1"));return i[F]?o(function(t,e,n,o){for(var r,s=i(t,null,o,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))}):function(t,o,r){return e[0]=t,i(e,null,r,n),!n.pop()}}),has:o(function(t){return function(n){return e(t,n).length>0}}),contains:o(function(t){return function(e){return(e.textContent||e.innerText||E(e)).indexOf(t)>-1}}),lang:o(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(Tt,Ct).toLowerCase(),function(e){var n;do if(n=_?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===I},focus:function(t){return t===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!C.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return vt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[0>n?n+e:n]}),even:u(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},C.pseudos.nth=C.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[x]=l(x);for(x in{submit:!0,reset:!0})C.pseudos[x]=c(x);return f.prototype=C.filters=C.pseudos,C.setFilters=new f,k=e.tokenize=function(t,n){var i,o,r,s,a,l,c,u=X[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],c=C.preFilter;a;){(!i||(o=ut.exec(a)))&&(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=dt.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(ct," ")}),a=a.slice(i.length));for(s in C.filter)!(o=gt[s].exec(a))||c[s]&&!(o=c[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):X(t,l).slice(0)},D=e.compile=function(t,e){var n,i=[],o=[],r=z[t+" "];if(!r){for(e||(e=k(t)),n=e.length;n--;)r=b(e[n]),r[F]?i.push(r):o.push(r);r=z(t,w(o,i)),r.selector=t}return r},N=e.select=function(t,e,n,i){var o,r,s,a,l,c="function"==typeof t&&t,u=!i&&k(t=c.selector||t);if(n=n||[],1===u.length){if(r=u[0]=u[0].slice(0),r.length>2&&"ID"===(s=r[0]).type&&T.getById&&9===e.nodeType&&_&&C.relative[r[1].type]){if(e=(C.find.ID(s.matches[0].replace(Tt,Ct),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=gt.needsContext.test(t)?0:r.length;o--&&(s=r[o],!C.relative[a=s.type]);)if((l=C.find[a])&&(i=l(s.matches[0].replace(Tt,Ct),wt.test(r[0].type)&&d(e.parentNode)||e))){if(r.splice(o,1),t=i.length&&p(r),!t)return tt.apply(n,i),n;break}}return(c||D(t,u))(i,e,!_,n,wt.test(t)&&d(e.parentNode)||e),n},T.sortStable=F.split("").sort(Y).join("")===F,T.detectDuplicates=!!j,O(),T.sortDetached=r(function(t){return 1&t.compareDocumentPosition(L.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),T.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||s(it,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);tt.find=rt,tt.expr=rt.selectors,tt.expr[":"]=tt.expr.pseudos,tt.unique=rt.uniqueSort,tt.text=rt.getText,tt.isXMLDoc=rt.isXML,tt.contains=rt.contains;var st=tt.expr.match.needsContext,at=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,lt=/^.[^:#\[\.,]*$/;tt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?tt.find.matchesSelector(i,t)?[i]:[]:tt.find.matches(t,tt.grep(e,function(t){return 1===t.nodeType}))},tt.fn.extend({find:function(t){var e,n=this.length,i=[],o=this;if("string"!=typeof t)return this.pushStack(tt(t).filter(function(){for(e=0;n>e;e++)if(tt.contains(o[e],this))return!0}));for(e=0;n>e;e++)tt.find(t,o[e],i);return i=this.pushStack(n>1?tt.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(o(this,t||[],!1))},not:function(t){return this.pushStack(o(this,t||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&st.test(t)?tt(t):t||[],!1).length}});var ct,ut=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,dt=tt.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ut.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||ct).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof tt?e[0]:e,tt.merge(this,tt.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:K,!0)),at.test(n[1])&&tt.isPlainObject(e))for(n in e)tt.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return i=K.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=K,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):tt.isFunction(t)?"undefined"!=typeof ct.ready?ct.ready(t):t(tt):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),tt.makeArray(t,this))};dt.prototype=tt.fn,ct=tt(K);var ft=/^(?:parents|prev(?:Until|All))/,pt={children:!0,contents:!0,next:!0,prev:!0};tt.extend({dir:function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&tt(t).is(n))break;i.push(t)}return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),tt.fn.extend({has:function(t){var e=tt(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(tt.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,o=this.length,r=[],s=st.test(t)||"string"!=typeof t?tt(t,e||this.context):0;o>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&tt.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?tt.unique(r):r)},index:function(t){return t?"string"==typeof t?Y.call(tt(t),this[0]):Y.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(tt.unique(tt.merge(this.get(),tt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),tt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return tt.dir(t,"parentNode")},parentsUntil:function(t,e,n){return tt.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return tt.dir(t,"nextSibling")},prevAll:function(t){return tt.dir(t,"previousSibling")},nextUntil:function(t,e,n){return tt.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return tt.dir(t,"previousSibling",n)},siblings:function(t){return tt.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return tt.sibling(t.firstChild)},contents:function(t){return t.contentDocument||tt.merge([],t.childNodes)}},function(t,e){tt.fn[t]=function(n,i){var o=tt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=tt.filter(i,o)),this.length>1&&(pt[t]||tt.unique(o),ft.test(t)&&o.reverse()),this.pushStack(o)}});var ht=/\S+/g,gt={};tt.Callbacks=function(t){t="string"==typeof t?gt[t]||s(t):tt.extend({},t);var e,n,i,o,r,a,l=[],c=!t.once&&[],u=function f(s){for(e=t.memory&&s,n=!0,a=o||0,o=0,r=l.length,i=!0;l&&r>a;a++)if(l[a].apply(s[0],s[1])===!1&&t.stopOnFalse){e=!1;break}i=!1,l&&(c?c.length&&f(c.shift()):e?l=[]:d.disable())},d={add:function(){if(l){var n=l.length;!function s(e){tt.each(e,function(e,n){var i=tt.type(n);"function"===i?t.unique&&d.has(n)||l.push(n):n&&n.length&&"string"!==i&&s(n)})}(arguments),i?r=l.length:e&&(o=n,u(e))}return this},remove:function(){return l&&tt.each(arguments,function(t,e){for(var n;(n=tt.inArray(e,l,n))>-1;)l.splice(n,1),i&&(r>=n&&r--,a>=n&&a--)}),this},has:function(t){return t?tt.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],r=0,this},disable:function(){return l=c=e=void 0,this},disabled:function(){return!l},lock:function(){return c=void 0,e||d.disable(),this},locked:function(){return!c},fireWith:function(t,e){return!l||n&&!c||(e=e||[],e=[t,e.slice?e.slice():e],i?c.push(e):u(e)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},tt.extend({Deferred:function(t){var e=[["resolve","done",tt.Callbacks("once memory"),"resolved"],["reject","fail",tt.Callbacks("once memory"),"rejected"],["notify","progress",tt.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return tt.Deferred(function(n){tt.each(e,function(e,r){var s=tt.isFunction(t[e])&&t[e];o[r[1]](function(){var t=s&&s.apply(this,arguments);t&&tt.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[r[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?tt.extend(t,i):i}},o={};return i.pipe=i.then,tt.each(e,function(t,r){var s=r[2],a=r[3];i[r[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e,n,i,o=0,r=U.call(arguments),s=r.length,a=1!==s||t&&tt.isFunction(t.promise)?s:0,l=1===a?t:tt.Deferred(),c=function(t,n,i){return function(o){n[t]=this,i[t]=arguments.length>1?U.call(arguments):o,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);s>o;o++)r[o]&&tt.isFunction(r[o].promise)?r[o].promise().done(c(o,i,r)).fail(l.reject).progress(c(o,n,e)):--a;return a||l.resolveWith(i,r),l.promise()}});var vt;tt.fn.ready=function(t){return tt.ready.promise().done(t),this},tt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?tt.readyWait++:tt.ready(!0)},ready:function(t){(t===!0?--tt.readyWait:tt.isReady)||(tt.isReady=!0,t!==!0&&--tt.readyWait>0||(vt.resolveWith(K,[tt]),tt.fn.triggerHandler&&(tt(K).triggerHandler("ready"),tt(K).off("ready"))))}}),tt.ready.promise=function(e){return vt||(vt=tt.Deferred(),"complete"===K.readyState?setTimeout(tt.ready):(K.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1))),vt.promise(e)},tt.ready.promise();var mt=tt.access=function(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===tt.type(n)){o=!0;for(a in n)tt.access(t,e,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,tt.isFunction(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(tt(t),n)})),e))for(;l>a;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r};tt.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},l.uid=1,l.accepts=tt.acceptData,l.prototype={key:function(t){if(!l.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=l.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(i){e[this.expando]=n,tt.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var i,o=this.key(t),r=this.cache[o];if("string"==typeof e)r[e]=n;else if(tt.isEmptyObject(r))tt.extend(this.cache[o],e);else for(i in e)r[i]=e[i];return r},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,tt.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,o,r=this.key(t),s=this.cache[r];if(void 0===e)this.cache[r]={};else{tt.isArray(e)?i=e.concat(e.map(tt.camelCase)):(o=tt.camelCase(e),e in s?i=[e,o]:(i=o,i=i in s?[i]:i.match(ht)||[])),n=i.length;for(;n--;)delete s[i[n]]}},hasData:function(t){return!tt.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var yt=new l,bt=new l,wt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,xt=/([A-Z])/g;tt.extend({hasData:function(t){return bt.hasData(t)||yt.hasData(t)},data:function(t,e,n){return bt.access(t,e,n)},removeData:function(t,e){bt.remove(t,e)},_data:function(t,e,n){return yt.access(t,e,n)},_removeData:function(t,e){yt.remove(t,e)}}),tt.fn.extend({data:function(t,e){var n,o,r,s=this[0],a=s&&s.attributes;if(void 0===t){if(this.length&&(r=bt.get(s),1===s.nodeType&&!yt.get(s,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(o=a[n].name,0===o.indexOf("data-")&&(o=tt.camelCase(o.slice(5)),c(s,o,r[o])));yt.set(s,"hasDataAttrs",!0)}return r}return"object"==("undefined"==typeof t?"undefined":i(t))?this.each(function(){bt.set(this,t)}):mt(this,function(e){var n,i=tt.camelCase(t);if(s&&void 0===e){if(n=bt.get(s,t),void 0!==n)return n;if(n=bt.get(s,i),void 0!==n)return n;if(n=c(s,i,void 0),void 0!==n)return n}else this.each(function(){var n=bt.get(this,i);bt.set(this,i,e),-1!==t.indexOf("-")&&void 0!==n&&bt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){bt.remove(this,t)})}}),tt.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=yt.get(t,e),n&&(!i||tt.isArray(n)?i=yt.access(t,e,tt.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=tt.queue(t,e),i=n.length,o=n.shift(),r=tt._queueHooks(t,e),s=function(){tt.dequeue(t,e)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return yt.get(t,n)||yt.access(t,n,{empty:tt.Callbacks("once memory").add(function(){yt.remove(t,[e+"queue",n])})})}}),tt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?tt.queue(this[0],t):void 0===e?this:this.each(function(){var n=tt.queue(this,t,e);tt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&tt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){tt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=tt.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=yt.get(r[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var Tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ct=["Top","Right","Bottom","Left"],Et=function(t,e){return t=e||t,"none"===tt.css(t,"display")||!tt.contains(t.ownerDocument,t)},St=/^(?:checkbox|radio)$/i;!function(){var t=K.createDocumentFragment(),e=t.appendChild(K.createElement("div")),n=K.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),J.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",J.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var kt="undefined";J.focusinBubbles="onfocusin"in t;var Dt=/^key/,Nt=/^(?:mouse|pointer|contextmenu)|click/,$t=/^(?:focusinfocus|focusoutblur)$/,At=/^([^.]*)(?:\.(.+)|)$/;tt.event={global:{},add:function(t,e,n,o,r){var s,a,l,c,u,d,f,p,h,g,v,m=yt.get(t);if(m)for(n.handler&&(s=n,n=s.handler,r=s.selector),n.guid||(n.guid=tt.guid++),(c=m.events)||(c=m.events={}),(a=m.handle)||(a=m.handle=function(e){return("undefined"==typeof tt?"undefined":i(tt))!==kt&&tt.event.triggered!==e.type?tt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(ht)||[""],u=e.length;u--;)l=At.exec(e[u])||[],h=v=l[1],g=(l[2]||"").split(".").sort(),h&&(f=tt.event.special[h]||{},h=(r?f.delegateType:f.bindType)||h,f=tt.event.special[h]||{},d=tt.extend({type:h,origType:v,data:o,handler:n,guid:n.guid,selector:r,needsContext:r&&tt.expr.match.needsContext.test(r),namespace:g.join(".")},s),(p=c[h])||(p=c[h]=[],p.delegateCount=0,f.setup&&f.setup.call(t,o,g,a)!==!1||t.addEventListener&&t.addEventListener(h,a,!1)),f.add&&(f.add.call(t,d),d.handler.guid||(d.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,d):p.push(d),tt.event.global[h]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,c,u,d,f,p,h,g,v=yt.hasData(t)&&yt.get(t);if(v&&(l=v.events)){for(e=(e||"").match(ht)||[""],c=e.length;c--;)if(a=At.exec(e[c])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p){for(d=tt.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,f=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=f.length;r--;)u=f[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(r,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(t,u));s&&!f.length&&(d.teardown&&d.teardown.call(t,h,v.handle)!==!1||tt.removeEvent(t,p,v.handle),delete l[p])}else for(p in l)tt.event.remove(t,p+e[c],n,i,!0);tt.isEmptyObject(l)&&(delete v.handle,yt.remove(t,"events"))}},trigger:function(e,n,o,r){var s,a,l,c,u,d,f,p=[o||K],h=G.call(e,"type")?e.type:e,g=G.call(e,"namespace")?e.namespace.split("."):[];if(a=l=o=o||K,3!==o.nodeType&&8!==o.nodeType&&!$t.test(h+tt.event.triggered)&&(h.indexOf(".")>=0&&(g=h.split("."),h=g.shift(),g.sort()),u=h.indexOf(":")<0&&"on"+h,e=e[tt.expando]?e:new tt.Event(h,"object"==("undefined"==typeof e?"undefined":i(e))&&e),e.isTrigger=r?2:3,e.namespace=g.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=o),n=null==n?[e]:tt.makeArray(n,[e]),f=tt.event.special[h]||{},r||!f.trigger||f.trigger.apply(o,n)!==!1)){if(!r&&!f.noBubble&&!tt.isWindow(o)){for(c=f.delegateType||h,$t.test(c+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),l=a;l===(o.ownerDocument||K)&&p.push(l.defaultView||l.parentWindow||t)}for(s=0;(a=p[s++])&&!e.isPropagationStopped();)e.type=s>1?c:f.bindType||h,d=(yt.get(a,"events")||{})[e.type]&&yt.get(a,"handle"),d&&d.apply(a,n),d=u&&a[u],d&&d.apply&&tt.acceptData(a)&&(e.result=d.apply(a,n),e.result===!1&&e.preventDefault());return e.type=h,r||e.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!tt.acceptData(o)||u&&tt.isFunction(o[h])&&!tt.isWindow(o)&&(l=o[u],l&&(o[u]=null),tt.event.triggered=h,o[h](),tt.event.triggered=void 0,l&&(o[u]=l)),e.result}},dispatch:function(t){t=tt.event.fix(t);var e,n,i,o,r,s=[],a=U.call(arguments),l=(yt.get(this,"events")||{})[t.type]||[],c=tt.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(s=tt.event.handlers.call(this,t,l),e=0;(o=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(r.namespace))&&(t.handleObj=r,t.data=r.data,i=((tt.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(i=[],n=0;a>n;n++)r=e[n],o=r.selector+" ",void 0===i[o]&&(i[o]=r.needsContext?tt(o,this).index(l)>=0:tt.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,r=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||K,i=n.documentElement,o=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[tt.expando])return t;var e,n,i,o=t.type,r=t,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=Nt.test(o)?this.mouseHooks:Dt.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new tt.Event(r),e=i.length;e--;)n=i[e],t[n]=r[n];
return t.target||(t.target=K),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,r):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==f()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&tt.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return tt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var o=tt.extend(new tt.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?tt.event.trigger(o,null,e):tt.event.dispatch.call(e,o),o.isDefaultPrevented()&&n.preventDefault()}},tt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},tt.Event=function(t,e){return this instanceof tt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?u:d):this.type=t,e&&tt.extend(this,e),this.timeStamp=t&&t.timeStamp||tt.now(),void(this[tt.expando]=!0)):new tt.Event(t,e)},tt.Event.prototype={isDefaultPrevented:d,isPropagationStopped:d,isImmediatePropagationStopped:d,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=u,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=u,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=u,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},tt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){tt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;return(!o||o!==i&&!tt.contains(i,o))&&(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),J.focusinBubbles||tt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){tt.event.simulate(e,t.target,tt.event.fix(t),!0)};tt.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=yt.access(i,e);o||i.addEventListener(t,n,!0),yt.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=yt.access(i,e)-1;o?yt.access(i,e,o):(i.removeEventListener(t,n,!0),yt.remove(i,e))}}}),tt.fn.extend({on:function(t,e,n,o,r){var s,a;if("object"==("undefined"==typeof t?"undefined":i(t))){"string"!=typeof e&&(n=n||e,e=void 0);for(a in t)this.on(a,e,n,t[a],r);return this}if(null==n&&null==o?(o=e,n=e=void 0):null==o&&("string"==typeof e?(o=n,n=void 0):(o=n,n=e,e=void 0)),o===!1)o=d;else if(!o)return this;return 1===r&&(s=o,o=function(t){return tt().off(t),s.apply(this,arguments)},o.guid=s.guid||(s.guid=tt.guid++)),this.each(function(){tt.event.add(this,t,o,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var o,r;if(t&&t.preventDefault&&t.handleObj)return o=t.handleObj,tt(t.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"==("undefined"==typeof t?"undefined":i(t))){for(r in t)this.off(r,e,t[r]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=d),this.each(function(){tt.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){tt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?tt.event.trigger(t,e,n,!0):void 0}});var jt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ot=/<([\w:]+)/,Lt=/<|&#?\w+;/,It=/<(?:script|style|link)/i,_t=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^$|\/(?:java|ecma)script/i,Pt=/^true\/(.*)/,Ht=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,qt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};qt.optgroup=qt.option,qt.tbody=qt.tfoot=qt.colgroup=qt.caption=qt.thead,qt.th=qt.td,tt.extend({clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(!0),l=tt.contains(t.ownerDocument,t);if(!(J.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||tt.isXMLDoc(t)))for(s=y(a),r=y(t),i=0,o=r.length;o>i;i++)b(r[i],s[i]);if(e)if(n)for(r=r||y(t),s=s||y(a),i=0,o=r.length;o>i;i++)m(r[i],s[i]);else m(t,a);return s=y(a,"script"),s.length>0&&v(s,!l&&y(t,"script")),a},buildFragment:function(t,e,n,i){for(var o,r,s,a,l,c,u=e.createDocumentFragment(),d=[],f=0,p=t.length;p>f;f++)if(o=t[f],o||0===o)if("object"===tt.type(o))tt.merge(d,o.nodeType?[o]:o);else if(Lt.test(o)){for(r=r||u.appendChild(e.createElement("div")),s=(Ot.exec(o)||["",""])[1].toLowerCase(),a=qt[s]||qt._default,r.innerHTML=a[1]+o.replace(jt,"<$1></$2>")+a[2],c=a[0];c--;)r=r.lastChild;tt.merge(d,r.childNodes),r=u.firstChild,r.textContent=""}else d.push(e.createTextNode(o));for(u.textContent="",f=0;o=d[f++];)if((!i||-1===tt.inArray(o,i))&&(l=tt.contains(o.ownerDocument,o),r=y(u.appendChild(o),"script"),l&&v(r),n))for(c=0;o=r[c++];)Rt.test(o.type||"")&&n.push(o);return u},cleanData:function(t){for(var e,n,i,o,r=tt.event.special,s=0;void 0!==(n=t[s]);s++){if(tt.acceptData(n)&&(o=n[yt.expando],o&&(e=yt.cache[o]))){if(e.events)for(i in e.events)r[i]?tt.event.remove(n,i):tt.removeEvent(n,i,e.handle);yt.cache[o]&&delete yt.cache[o]}delete bt.cache[n[bt.expando]]}}}),tt.fn.extend({text:function(t){return mt(this,function(t){return void 0===t?tt.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=p(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=p(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?tt.filter(t,this):this,o=0;null!=(n=i[o]);o++)e||1!==n.nodeType||tt.cleanData(y(n)),n.parentNode&&(e&&tt.contains(n.ownerDocument,n)&&v(y(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(tt.cleanData(y(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return tt.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!It.test(t)&&!qt[(Ot.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(jt,"<$1></$2>");try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(tt.cleanData(y(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,tt.cleanData(y(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=X.apply([],t);var n,i,o,r,s,a,l=0,c=this.length,u=this,d=c-1,f=t[0],p=tt.isFunction(f);if(p||c>1&&"string"==typeof f&&!J.checkClone&&_t.test(f))return this.each(function(n){var i=u.eq(n);p&&(t[0]=f.call(this,n,i.html())),i.domManip(t,e)});if(c&&(n=tt.buildFragment(t,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(o=tt.map(y(n,"script"),h),r=o.length;c>l;l++)s=n,l!==d&&(s=tt.clone(s,!0,!0),r&&tt.merge(o,y(s,"script"))),e.call(this[l],s,l);if(r)for(a=o[o.length-1].ownerDocument,tt.map(o,g),l=0;r>l;l++)s=o[l],Rt.test(s.type||"")&&!yt.access(s,"globalEval")&&tt.contains(a,s)&&(s.src?tt._evalUrl&&tt._evalUrl(s.src):tt.globalEval(s.textContent.replace(Ht,"")))}return this}}),tt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){tt.fn[t]=function(t){for(var n,i=[],o=tt(t),r=o.length-1,s=0;r>=s;s++)n=s===r?this:this.clone(!0),tt(o[s])[e](n),z.apply(i,n.get());return this.pushStack(i)}});var Ft,Mt={},Bt=/^margin/,Wt=new RegExp("^("+Tt+")(?!px)[a-z%]+$","i"),Ut=function(t){return t.ownerDocument.defaultView.getComputedStyle(t,null)};!function(){var e,n,i=K.documentElement,o=K.createElement("div"),r=K.createElement("div");r.style&&!function(){var s=function a(){r.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",r.innerHTML="",i.appendChild(o);var a=t.getComputedStyle(r,null);e="1%"!==a.top,n="4px"===a.width,i.removeChild(o)};r.style.backgroundClip="content-box",r.cloneNode(!0).style.backgroundClip="",J.clearCloneStyle="content-box"===r.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(r),t.getComputedStyle&&tt.extend(J,{pixelPosition:function(){return s(),e},boxSizingReliable:function(){return null==n&&s(),n},reliableMarginRight:function(){var e,n=r.appendChild(K.createElement("div"));return n.style.cssText=r.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",r.style.width="1px",i.appendChild(o),e=!parseFloat(t.getComputedStyle(n,null).marginRight),i.removeChild(o),e}})}()}(),tt.swap=function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];o=n.apply(t,i||[]);for(r in e)t.style[r]=s[r];return o};var Xt=/^(none|table(?!-c[ea]).+)/,zt=new RegExp("^("+Tt+")(.*)$","i"),Yt=new RegExp("^([+-])=("+Tt+")","i"),Vt={position:"absolute",visibility:"hidden",display:"block"},Qt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];tt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=T(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,o){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,a,l=tt.camelCase(e),c=t.style;return e=tt.cssProps[l]||(tt.cssProps[l]=E(c,l)),a=tt.cssHooks[e]||tt.cssHooks[l],void 0===n?a&&"get"in a&&void 0!==(r=a.get(t,!1,o))?r:c[e]:(s="undefined"==typeof n?"undefined":i(n),"string"===s&&(r=Yt.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(tt.css(t,e)),s="number"),void(null!=n&&n===n&&("number"!==s||tt.cssNumber[l]||(n+="px"),J.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,o))||(c[e]=n))))}},css:function(t,e,n,i){var o,r,s,a=tt.camelCase(e);return e=tt.cssProps[a]||(tt.cssProps[a]=E(t.style,a)),s=tt.cssHooks[e]||tt.cssHooks[a],s&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=T(t,e,i)),"normal"===o&&e in Qt&&(o=Qt[e]),""===n||n?(r=parseFloat(o),n===!0||tt.isNumeric(r)?r||0:o):o}}),tt.each(["height","width"],function(t,e){tt.cssHooks[e]={get:function(t,n,i){return n?Xt.test(tt.css(t,"display"))&&0===t.offsetWidth?tt.swap(t,Vt,function(){return D(t,e,i)}):D(t,e,i):void 0},set:function(t,n,i){var o=i&&Ut(t);return S(t,n,i?k(t,e,i,"border-box"===tt.css(t,"boxSizing",!1,o),o):0)}}}),tt.cssHooks.marginRight=C(J.reliableMarginRight,function(t,e){return e?tt.swap(t,{display:"inline-block"},T,[t,"marginRight"]):void 0}),tt.each({margin:"",padding:"",border:"Width"},function(t,e){tt.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];4>i;i++)o[t+Ct[i]+e]=r[i]||r[i-2]||r[0];return o}},Bt.test(t)||(tt.cssHooks[t+e].set=S)}),tt.fn.extend({css:function(t,e){return mt(this,function(t,e,n){var i,o,r={},s=0;if(tt.isArray(e)){for(i=Ut(t),o=e.length;o>s;s++)r[e[s]]=tt.css(t,e[s],!1,i);return r}return void 0!==n?tt.style(t,e,n):tt.css(t,e)},t,e,arguments.length>1)},show:function(){return N(this,!0)},hide:function(){return N(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Et(this)?tt(this).show():tt(this).hide()})}}),tt.Tween=$,$.prototype={constructor:$,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(tt.cssNumber[n]?"":"px")},cur:function(){var t=$.propHooks[this.prop];return t&&t.get?t.get(this):$.propHooks._default.get(this)},run:function(t){var e,n=$.propHooks[this.prop];return this.pos=e=this.options.duration?tt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):$.propHooks._default.set(this),this}},$.prototype.init.prototype=$.prototype,$.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=tt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){tt.fx.step[t.prop]?tt.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[tt.cssProps[t.prop]]||tt.cssHooks[t.prop])?tt.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},$.propHooks.scrollTop=$.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},tt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},tt.fx=$.prototype.init,tt.fx.step={};var Jt,Kt,Zt=/^(?:toggle|show|hide)$/,te=new RegExp("^(?:([+-])=|)("+Tt+")([a-z%]*)$","i"),ee=/queueHooks$/,ne=[L],ie={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),o=te.exec(e),r=o&&o[3]||(tt.cssNumber[t]?"":"px"),s=(tt.cssNumber[t]||"px"!==r&&+i)&&te.exec(tt.css(n.elem,t)),a=1,l=20;if(s&&s[3]!==r){r=r||s[3],o=o||[],s=+i||1;do a=a||".5",s/=a,tt.style(n.elem,t,s+r);while(a!==(a=n.cur()/i)&&1!==a&&--l)}return o&&(s=n.start=+s||+i||0,n.unit=r,n.end=o[1]?s+(o[1]+1)*o[2]:+o[2]),n}]};tt.Animation=tt.extend(_,{tweener:function(t,e){tt.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,o=t.length;o>i;i++)n=t[i],ie[n]=ie[n]||[],ie[n].unshift(e)},prefilter:function(t,e){e?ne.unshift(t):ne.push(t)}}),tt.speed=function(t,e,n){var o=t&&"object"==("undefined"==typeof t?"undefined":i(t))?tt.extend({},t):{complete:n||!n&&e||tt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!tt.isFunction(e)&&e};return o.duration=tt.fx.off?0:"number"==typeof o.duration?o.duration:o.duration in tt.fx.speeds?tt.fx.speeds[o.duration]:tt.fx.speeds._default,(null==o.queue||o.queue===!0)&&(o.queue="fx"),o.old=o.complete,o.complete=function(){tt.isFunction(o.old)&&o.old.call(this),o.queue&&tt.dequeue(this,o.queue)},o},tt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Et).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=tt.isEmptyObject(t),r=tt.speed(e,n,i),s=function(){var e=_(this,tt.extend({},t),r);(o||yt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||r.queue===!1?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=tt.timers,s=yt.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&ee.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));(e||!n)&&tt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=yt.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=tt.timers,s=i?i.length:0;for(n.finish=!0,tt.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),tt.each(["toggle","show","hide"],function(t,e){var n=tt.fn[e];tt.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(j(e,!0),t,i,o)}}),tt.each({slideDown:j("show"),slideUp:j("hide"),slideToggle:j("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){tt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),tt.timers=[],tt.fx.tick=function(){var t,e=0,n=tt.timers;for(Jt=tt.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||tt.fx.stop(),Jt=void 0},tt.fx.timer=function(t){tt.timers.push(t),t()?tt.fx.start():tt.timers.pop()},tt.fx.interval=13,tt.fx.start=function(){Kt||(Kt=setInterval(tt.fx.tick,tt.fx.interval))},tt.fx.stop=function(){clearInterval(Kt),Kt=null},tt.fx.speeds={slow:600,fast:200,_default:400},tt.fn.delay=function(t,e){return t=tt.fx?tt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t=K.createElement("input"),e=K.createElement("select"),n=e.appendChild(K.createElement("option"));t.type="checkbox",J.checkOn=""!==t.value,J.optSelected=n.selected,e.disabled=!0,J.optDisabled=!n.disabled,t=K.createElement("input"),t.value="t",t.type="radio",J.radioValue="t"===t.value}();var oe,re,se=tt.expr.attrHandle;tt.fn.extend({attr:function(t,e){return mt(this,tt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){tt.removeAttr(this,t)})}}),tt.extend({attr:function(t,e,n){var o,r,s=t.nodeType;return t&&3!==s&&8!==s&&2!==s?i(t.getAttribute)===kt?tt.prop(t,e,n):(1===s&&tt.isXMLDoc(t)||(e=e.toLowerCase(),o=tt.attrHooks[e]||(tt.expr.match.bool.test(e)?re:oe)),void 0===n?o&&"get"in o&&null!==(r=o.get(t,e))?r:(r=tt.find.attr(t,e),null==r?void 0:r):null!==n?o&&"set"in o&&void 0!==(r=o.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void tt.removeAttr(t,e)):void 0},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(ht);if(r&&1===t.nodeType)for(;n=r[o++];)i=tt.propFix[n]||n,tt.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!J.radioValue&&"radio"===e&&tt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),re={set:function(t,e,n){return e===!1?tt.removeAttr(t,n):t.setAttribute(n,n),n}},tt.each(tt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=se[e]||tt.find.attr;se[e]=function(t,e,i){var o,r;return i||(r=se[e],se[e]=o,o=null!=n(t,e,i)?e.toLowerCase():null,se[e]=r),o}});var ae=/^(?:input|select|textarea|button)$/i;tt.fn.extend({prop:function(t,e){return mt(this,tt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[tt.propFix[t]||t]})}}),tt.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,o,r,s=t.nodeType;return t&&3!==s&&8!==s&&2!==s?(r=1!==s||!tt.isXMLDoc(t),r&&(e=tt.propFix[e]||e,o=tt.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]):void 0},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||ae.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),J.optSelected||(tt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),tt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){tt.propFix[this.toLowerCase()]=this});var le=/[\t\r\n\f]/g;tt.fn.extend({addClass:function(t){var e,n,i,o,r,s,a="string"==typeof t&&t,l=0,c=this.length;if(tt.isFunction(t))return this.each(function(e){tt(this).addClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ht)||[];c>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(le," "):" ")){for(r=0;o=e[r++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s=tt.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,i,o,r,s,a=0===arguments.length||"string"==typeof t&&t,l=0,c=this.length;if(tt.isFunction(t))return this.each(function(e){tt(this).removeClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ht)||[];c>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(le," "):"")){for(r=0;o=e[r++];)for(;i.indexOf(" "+o+" ")>=0;)i=i.replace(" "+o+" "," ");s=t?tt.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(t,e){var n="undefined"==typeof t?"undefined":i(t);return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):this.each(tt.isFunction(t)?function(n){tt(this).toggleClass(t.call(this,n,this.className,e),e)}:function(){if("string"===n)for(var e,i=0,o=tt(this),r=t.match(ht)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else(n===kt||"boolean"===n)&&(this.className&&yt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":yt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(le," ").indexOf(e)>=0)return!0;return!1}});var ce=/\r/g;tt.fn.extend({val:function(t){var e,n,i,o=this[0];return arguments.length?(i=tt.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(o=i?t.call(this,n,tt(this).val()):t,null==o?o="":"number"==typeof o?o+="":tt.isArray(o)&&(o=tt.map(o,function(t){return null==t?"":t+""})),e=tt.valHooks[this.type]||tt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))})):o?(e=tt.valHooks[o.type]||tt.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(ce,""):null==n?"":n)):void 0}}),tt.extend({valHooks:{option:{get:function(t){var e=tt.find.attr(t,"value");return null!=e?e:tt.trim(tt.text(t))}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||0>o,s=r?null:[],a=r?o+1:i.length,l=0>o?a:r?o:0;a>l;l++)if(n=i[l],!(!n.selected&&l!==o||(J.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&tt.nodeName(n.parentNode,"optgroup"))){if(e=tt(n).val(),r)return e;s.push(e)}return s},set:function(t,e){for(var n,i,o=t.options,r=tt.makeArray(e),s=o.length;s--;)i=o[s],(i.selected=tt.inArray(i.value,r)>=0)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),tt.each(["radio","checkbox"],function(){tt.valHooks[this]={set:function(t,e){return tt.isArray(e)?t.checked=tt.inArray(tt(t).val(),e)>=0:void 0}},J.checkOn||(tt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),tt.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){tt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),tt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ue=tt.now(),de=/\?/;tt.parseJSON=function(t){return JSON.parse(t+"")},tt.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(i){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&tt.error("Invalid XML: "+t),e};var fe,pe,he=/#.*$/,ge=/([?&])_=[^&]*/,ve=/^(.*?):[ \t]*([^\r\n]*)$/gm,me=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ye=/^(?:GET|HEAD)$/,be=/^\/\//,we=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,xe={},Te={},Ce="*/".concat("*");try{pe=location.href}catch(Ee){pe=K.createElement("a"),pe.href="",pe=pe.href}fe=we.exec(pe.toLowerCase())||[],tt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:pe,type:"GET",isLocal:me.test(fe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ce,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":tt.parseJSON,"text xml":tt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?H(H(t,tt.ajaxSettings),e):H(tt.ajaxSettings,t)},ajaxPrefilter:R(xe),ajaxTransport:R(Te),ajax:function(t,e){function n(t,e,n,i){var a,c,d,y,b,x=e;2!==w&&(w=2,l&&clearTimeout(l),o=void 0,s=i||"",T.readyState=t>0?4:0,a=t>=200&&300>t||304===t,n&&(y=q(f,T,n)),y=F(f,y,T,a),a?(f.ifModified&&(b=T.getResponseHeader("Last-Modified"),b&&(tt.lastModified[r]=b),b=T.getResponseHeader("etag"),b&&(tt.etag[r]=b)),204===t||"HEAD"===f.type?x="nocontent":304===t?x="notmodified":(x=y.state,c=y.data,d=y.error,a=!d)):(d=x,(t||!x)&&(x="error",0>t&&(t=0))),T.status=t,T.statusText=(e||x)+"",a?g.resolveWith(p,[c,x,T]):g.rejectWith(p,[T,x,d]),T.statusCode(m),m=void 0,u&&h.trigger(a?"ajaxSuccess":"ajaxError",[T,f,a?c:d]),v.fireWith(p,[T,x]),u&&(h.trigger("ajaxComplete",[T,f]),--tt.active||tt.event.trigger("ajaxStop")))}"object"==("undefined"==typeof t?"undefined":i(t))&&(e=t,t=void 0),e=e||{};var o,r,s,a,l,c,u,d,f=tt.ajaxSetup({},e),p=f.context||f,h=f.context&&(p.nodeType||p.jquery)?tt(p):tt.event,g=tt.Deferred(),v=tt.Callbacks("once memory"),m=f.statusCode||{},y={},b={},w=0,x="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!a)for(a={};e=ve.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=b[n]=b[n]||t,y[t]=e),this},overrideMimeType:function(t){return w||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>w)for(e in t)m[e]=[m[e],t[e]];else T.always(t[T.status]);return this},abort:function(t){var e=t||x;return o&&o.abort(e),n(0,e),this}};if(g.promise(T).complete=v.add,T.success=T.done,T.error=T.fail,f.url=((t||f.url||pe)+"").replace(he,"").replace(be,fe[1]+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=tt.trim(f.dataType||"*").toLowerCase().match(ht)||[""],null==f.crossDomain&&(c=we.exec(f.url.toLowerCase()),f.crossDomain=!(!c||c[1]===fe[1]&&c[2]===fe[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(fe[3]||("http:"===fe[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=tt.param(f.data,f.traditional)),P(xe,f,e,T),2===w)return T;u=f.global,u&&0===tt.active++&&tt.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!ye.test(f.type),r=f.url,f.hasContent||(f.data&&(r=f.url+=(de.test(r)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=ge.test(r)?r.replace(ge,"$1_="+ue++):r+(de.test(r)?"&":"?")+"_="+ue++)),f.ifModified&&(tt.lastModified[r]&&T.setRequestHeader("If-Modified-Since",tt.lastModified[r]),tt.etag[r]&&T.setRequestHeader("If-None-Match",tt.etag[r])),(f.data&&f.hasContent&&f.contentType!==!1||e.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ce+"; q=0.01":""):f.accepts["*"]);for(d in f.headers)T.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(f.beforeSend.call(p,T,f)===!1||2===w))return T.abort();x="abort";for(d in{success:1,error:1,complete:1})T[d](f[d]);if(o=P(Te,f,e,T)){T.readyState=1,u&&h.trigger("ajaxSend",[T,f]),f.async&&f.timeout>0&&(l=setTimeout(function(){T.abort("timeout")},f.timeout));try{w=1,o.send(y,n)}catch(C){if(!(2>w))throw C;n(-1,C)}}else n(-1,"No Transport");return T},getJSON:function(t,e,n){return tt.get(t,e,n,"json")},getScript:function(t,e){return tt.get(t,void 0,e,"script")}}),tt.each(["get","post"],function(t,e){tt[e]=function(t,n,i,o){return tt.isFunction(n)&&(o=o||i,i=n,n=void 0),tt.ajax({url:t,type:e,dataType:o,data:n,success:i})}}),tt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){tt.fn[e]=function(t){return this.on(e,t)}}),tt._evalUrl=function(t){return tt.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},tt.fn.extend({wrapAll:function(t){var e;return tt.isFunction(t)?this.each(function(e){tt(this).wrapAll(t.call(this,e))}):(this[0]&&(e=tt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return this.each(tt.isFunction(t)?function(e){tt(this).wrapInner(t.call(this,e))}:function(){var e=tt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=tt.isFunction(t);return this.each(function(n){tt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){tt.nodeName(this,"body")||tt(this).replaceWith(this.childNodes)}).end()}}),tt.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},tt.expr.filters.visible=function(t){return!tt.expr.filters.hidden(t)};var Se=/%20/g,ke=/\[\]$/,De=/\r?\n/g,Ne=/^(?:submit|button|image|reset|file)$/i,$e=/^(?:input|select|textarea|keygen)/i;tt.param=function(t,e){var n,i=[],o=function(t,e){e=tt.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=tt.ajaxSettings&&tt.ajaxSettings.traditional),tt.isArray(t)||t.jquery&&!tt.isPlainObject(t))tt.each(t,function(){o(this.name,this.value)});else for(n in t)M(n,t[n],e,o);return i.join("&").replace(Se,"+")},tt.fn.extend({serialize:function(){return tt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=tt.prop(this,"elements");return t?tt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!tt(this).is(":disabled")&&$e.test(this.nodeName)&&!Ne.test(t)&&(this.checked||!St.test(t))}).map(function(t,e){var n=tt(this).val();return null==n?null:tt.isArray(n)?tt.map(n,function(t){return{name:e.name,value:t.replace(De,"\r\n")}}):{name:e.name,value:n.replace(De,"\r\n")}}).get()}}),tt.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Ae=0,je={},Oe={0:200,1223:204},Le=tt.ajaxSettings.xhr();t.ActiveXObject&&tt(t).on("unload",function(){for(var t in je)je[t]()}),J.cors=!!Le&&"withCredentials"in Le,J.ajax=Le=!!Le,tt.ajaxTransport(function(t){var e;return J.cors||Le&&!t.crossDomain?{send:function(n,i){var o,r=t.xhr(),s=++Ae;if(r.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)r[o]=t.xhrFields[o];t.mimeType&&r.overrideMimeType&&r.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(o in n)r.setRequestHeader(o,n[o]);e=function(t){return function(){e&&(delete je[s],e=r.onload=r.onerror=null,"abort"===t?r.abort():"error"===t?i(r.status,r.statusText):i(Oe[r.status]||r.status,r.statusText,"string"==typeof r.responseText?{text:r.responseText}:void 0,r.getAllResponseHeaders()))}},r.onload=e(),r.onerror=e("error"),e=je[s]=e("abort");try{r.send(t.hasContent&&t.data||null)}catch(a){if(e)throw a}},abort:function(){e&&e()}}:void 0}),tt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return tt.globalEval(t),t}}}),tt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),tt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,o){e=tt("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){
e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),K.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ie=[],_e=/(=)\?(?=&|$)|\?\?/;tt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ie.pop()||tt.expando+"_"+ue++;return this[t]=!0,t}}),tt.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,s,a=e.jsonp!==!1&&(_e.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&_e.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(o=e.jsonpCallback=tt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(_e,"$1"+o):e.jsonp!==!1&&(e.url+=(de.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||tt.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){s=arguments},i.always(function(){t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,Ie.push(o)),s&&tt.isFunction(r)&&r(s[0]),s=r=void 0}),"script"):void 0}),tt.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||K;var i=at.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=tt.buildFragment([t],e,o),o&&o.length&&tt(o).remove(),tt.merge([],i.childNodes))};var Re=tt.fn.load;tt.fn.load=function(t,e,n){if("string"!=typeof t&&Re)return Re.apply(this,arguments);var o,r,s,a=this,l=t.indexOf(" ");return l>=0&&(o=tt.trim(t.slice(l)),t=t.slice(0,l)),tt.isFunction(e)?(n=e,e=void 0):e&&"object"==("undefined"==typeof e?"undefined":i(e))&&(r="POST"),a.length>0&&tt.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){s=arguments,a.html(o?tt("<div>").append(tt.parseHTML(t)).find(o):t)}).complete(n&&function(t,e){a.each(n,s||[t.responseText,e,t])}),this},tt.expr.filters.animated=function(t){return tt.grep(tt.timers,function(e){return t===e.elem}).length};var Pe=t.document.documentElement;tt.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,c,u=tt.css(t,"position"),d=tt(t),f={};"static"===u&&(t.style.position="relative"),a=d.offset(),r=tt.css(t,"top"),l=tt.css(t,"left"),c=("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1,c?(i=d.position(),s=i.top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),tt.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+o),"using"in e?e.using.call(t,f):d.css(f)}},tt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){tt.offset.setOffset(this,t,e)});var e,n,o=this[0],r={top:0,left:0},s=o&&o.ownerDocument;return s?(e=s.documentElement,tt.contains(e,o)?(i(o.getBoundingClientRect)!==kt&&(r=o.getBoundingClientRect()),n=B(s),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r):void 0},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===tt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),tt.nodeName(t[0],"html")||(i=t.offset()),i.top+=tt.css(t[0],"borderTopWidth",!0),i.left+=tt.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-tt.css(n,"marginTop",!0),left:e.left-i.left-tt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||Pe;t&&!tt.nodeName(t,"html")&&"static"===tt.css(t,"position");)t=t.offsetParent;return t||Pe})}}),tt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var i="pageYOffset"===n;tt.fn[e]=function(o){return mt(this,function(e,o,r){var s=B(e);return void 0===r?s?s[n]:e[o]:void(s?s.scrollTo(i?t.pageXOffset:r,i?r:t.pageYOffset):e[o]=r)},e,o,arguments.length,null)}}),tt.each(["top","left"],function(t,e){tt.cssHooks[e]=C(J.pixelPosition,function(t,n){return n?(n=T(t,e),Wt.test(n)?tt(t).position()[e]+"px":n):void 0})}),tt.each({Height:"height",Width:"width"},function(t,e){tt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){tt.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||o===!0?"margin":"border");return mt(this,function(e,n,i){var o;return tt.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?tt.css(e,n,s):tt.style(e,n,i,s)},e,r?i:void 0,r,null)}})}),tt.fn.size=function(){return this.length},tt.fn.andSelf=tt.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return tt});var He=t.jQuery,qe=t.$;return tt.noConflict=function(e){return t.$===tt&&(t.$=qe),e&&t.jQuery===tt&&(t.jQuery=He),tt},("undefined"==typeof e?"undefined":i(e))===kt&&(t.jQuery=t.$=tt),tt})},{}],6:[function(t,e,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t){"function"==typeof define&&define.amd?define(t):"undefined"!=typeof e&&"undefined"!=typeof e.exports?e.exports=t():"undefined"!=typeof Package?Sortable=t():window.Sortable=t()}(function(){function t(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be HTMLElement, and not "+{}.toString.call(t);this.el=t,this.options=e=b({},e),t[q]=this;var n={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(t.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",ignore:"a, img",filter:null,animation:0,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1};for(var i in n)!(i in e)&&(e[i]=n[i]);Q(e);for(var o in this)"_"===o.charAt(0)&&(this[o]=this[o].bind(this));this.nativeDraggable=e.forceFallback?!1:W,r(t,"mousedown",this._onTapStart),r(t,"touchstart",this._onTapStart),this.nativeDraggable&&(r(t,"dragover",this),r(t,"dragenter",this)),Y.push(this._onDragOver),e.store&&this.sort(e.store.get(this))}function e(t){C&&C.state!==t&&(l(C,"display",t?"none":""),!t&&C.state&&E.insertBefore(C,w),C.state=t)}function n(t,e,n){if(t){n=n||M;do if(">*"===e&&t.parentNode===n||m(t,e))return t;while(t!==n&&(t=t.parentNode))}return null}function o(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move"),t.preventDefault()}function r(t,e,n){t.addEventListener(e,n,!1)}function s(t,e,n){t.removeEventListener(e,n,!1)}function a(t,e,n){if(t)if(t.classList)t.classList[n?"add":"remove"](e);else{var i=(" "+t.className+" ").replace(H," ").replace(" "+e+" "," ");t.className=(i+(n?" "+e:"")).replace(H," ")}}function l(t,e,n){var i=t&&t.style;if(i){if(void 0===n)return M.defaultView&&M.defaultView.getComputedStyle?n=M.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in i||(e="-webkit-"+e),i[e]=n+("string"==typeof n?"":"px")}}function c(t,e,n){if(t){var i=t.getElementsByTagName(e),o=0,r=i.length;if(n)for(;r>o;o++)n(i[o],o);return i}return[]}function u(t,e,n,i,o,r,s){var a=M.createEvent("Event"),l=(t||e[q]).options,c="on"+n.charAt(0).toUpperCase()+n.substr(1);a.initEvent(n,!0,!0),a.to=e,a.from=o||e,a.item=i||e,a.clone=C,a.oldIndex=r,a.newIndex=s,e.dispatchEvent(a),l[c]&&l[c].call(t,a)}function d(t,e,n,i,o,r){var s,a,l=t[q],c=l.options.onMove;return s=M.createEvent("Event"),s.initEvent("move",!0,!0),s.to=e,s.from=t,s.dragged=n,s.draggedRect=i,s.related=o||e,s.relatedRect=r||e.getBoundingClientRect(),t.dispatchEvent(s),c&&(a=c.call(l,s)),a}function f(t){t.draggable=!1}function p(){X=!1}function h(t,e){var n=t.lastElementChild,i=n.getBoundingClientRect();return(e.clientY-(i.top+i.height)>5||e.clientX-(i.right+i.width)>5)&&n}function g(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,i=0;n--;)i+=e.charCodeAt(n);return i.toString(36)}function v(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t&&(t=t.previousElementSibling);)"TEMPLATE"!==t.nodeName.toUpperCase()&&m(t,e)&&n++;return n}function m(t,e){if(t){e=e.split(".");var n=e.shift().toUpperCase(),i=new RegExp("\\s("+e.join("|")+")(?=\\s)","g");return!(""!==n&&t.nodeName.toUpperCase()!=n||e.length&&((" "+t.className+" ").match(i)||[]).length!=e.length)}return!1}function y(t,e){var n,i;return function(){void 0===n&&(n=arguments,i=this,setTimeout(function(){1===n.length?t.call(i,n[0]):t.apply(i,n),n=void 0},e))}}function b(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}if("undefined"==typeof window||"undefined"==typeof window.document)return function(){throw new Error("Sortable.js requires a window with a document")};var w,x,T,C,E,S,k,D,N,$,A,j,O,L,I,_,R,P={},H=/\s+/g,q="Sortable"+(new Date).getTime(),F=window,M=F.document,B=F.parseInt,W=!!("draggable"in M.createElement("div")),U=function(t){return t=M.createElement("x"),t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}(),X=!1,z=Math.abs,Y=([].slice,[]),V=y(function(t,e,n){if(n&&e.scroll){var i,o,r,s,a=e.scrollSensitivity,l=e.scrollSpeed,c=t.clientX,u=t.clientY,d=window.innerWidth,f=window.innerHeight;if(D!==n&&(k=e.scroll,D=n,k===!0)){k=n;do if(k.offsetWidth<k.scrollWidth||k.offsetHeight<k.scrollHeight)break;while(k=k.parentNode)}k&&(i=k,o=k.getBoundingClientRect(),r=(z(o.right-c)<=a)-(z(o.left-c)<=a),s=(z(o.bottom-u)<=a)-(z(o.top-u)<=a)),r||s||(r=(a>=d-c)-(a>=c),s=(a>=f-u)-(a>=u),(r||s)&&(i=F)),P.vx===r&&P.vy===s&&P.el===i||(P.el=i,P.vx=r,P.vy=s,clearInterval(P.pid),i&&(P.pid=setInterval(function(){i===F?F.scrollTo(F.pageXOffset+r*l,F.pageYOffset+s*l):(s&&(i.scrollTop+=s*l),r&&(i.scrollLeft+=r*l))},24)))}},30),Q=function(t){var e=t.group;e&&"object"==("undefined"==typeof e?"undefined":i(e))||(e=t.group={name:e}),["pull","put"].forEach(function(t){t in e||(e[t]=!0)}),t.groups=" "+e.name+(e.put.join?" "+e.put.join(" "):"")+" "};return t.prototype={constructor:t,_onTapStart:function(t){var e=this,i=this.el,o=this.options,r=t.type,s=t.touches&&t.touches[0],a=(s||t).target,l=a,c=o.filter;if(!("mousedown"===r&&0!==t.button||o.disabled)&&(a=n(a,o.draggable,i))){if(j=v(a,o.draggable),"function"==typeof c){if(c.call(this,t,a,this))return u(e,l,"filter",a,i,j),void t.preventDefault()}else if(c&&(c=c.split(",").some(function(t){return t=n(l,t.trim(),i),t?(u(e,t,"filter",a,i,j),!0):void 0})))return void t.preventDefault();o.handle&&!n(l,o.handle,i)||this._prepareDragStart(t,s,a)}},_prepareDragStart:function(t,e,n){var i,o=this,s=o.el,l=o.options,u=s.ownerDocument;n&&!w&&n.parentNode===s&&(I=t,E=s,w=n,x=w.parentNode,S=w.nextSibling,L=l.group,i=function(){o._disableDelayedDrag(),w.draggable=!0,a(w,o.options.chosenClass,!0),o._triggerDragStart(e)},l.ignore.split(",").forEach(function(t){c(w,t.trim(),f)}),r(u,"mouseup",o._onDrop),r(u,"touchend",o._onDrop),r(u,"touchcancel",o._onDrop),l.delay?(r(u,"mouseup",o._disableDelayedDrag),r(u,"touchend",o._disableDelayedDrag),r(u,"touchcancel",o._disableDelayedDrag),r(u,"mousemove",o._disableDelayedDrag),r(u,"touchmove",o._disableDelayedDrag),o._dragStartTimer=setTimeout(i,l.delay)):i())},_disableDelayedDrag:function(){var t=this.el.ownerDocument;clearTimeout(this._dragStartTimer),s(t,"mouseup",this._disableDelayedDrag),s(t,"touchend",this._disableDelayedDrag),s(t,"touchcancel",this._disableDelayedDrag),s(t,"mousemove",this._disableDelayedDrag),s(t,"touchmove",this._disableDelayedDrag)},_triggerDragStart:function(t){t?(I={target:w,clientX:t.clientX,clientY:t.clientY},this._onDragStart(I,"touch")):this.nativeDraggable?(r(w,"dragend",this),r(E,"dragstart",this._onDragStart)):this._onDragStart(I,!0);try{M.selection?M.selection.empty():window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(){E&&w&&(a(w,this.options.ghostClass,!0),t.active=this,u(this,E,"start",w,E,j))},_emulateDragOver:function(){if(_){if(this._lastX===_.clientX&&this._lastY===_.clientY)return;this._lastX=_.clientX,this._lastY=_.clientY,U||l(T,"display","none");var t=M.elementFromPoint(_.clientX,_.clientY),e=t,n=" "+this.options.group.name,i=Y.length;if(e)do{if(e[q]&&e[q].options.groups.indexOf(n)>-1){for(;i--;)Y[i]({clientX:_.clientX,clientY:_.clientY,target:t,rootEl:e});break}t=e}while(e=e.parentNode);U||l(T,"display","")}},_onTouchMove:function(e){if(I){t.active||this._dragStarted(),this._appendGhost();var n=e.touches?e.touches[0]:e,i=n.clientX-I.clientX,o=n.clientY-I.clientY,r=e.touches?"translate3d("+i+"px,"+o+"px,0)":"translate("+i+"px,"+o+"px)";R=!0,_=n,l(T,"webkitTransform",r),l(T,"mozTransform",r),l(T,"msTransform",r),l(T,"transform",r),e.preventDefault()}},_appendGhost:function(){if(!T){var t,e=w.getBoundingClientRect(),n=l(w),i=this.options;T=w.cloneNode(!0),a(T,i.ghostClass,!1),a(T,i.fallbackClass,!0),l(T,"top",e.top-B(n.marginTop,10)),l(T,"left",e.left-B(n.marginLeft,10)),l(T,"width",e.width),l(T,"height",e.height),l(T,"opacity","0.8"),l(T,"position","fixed"),l(T,"zIndex","100000"),l(T,"pointerEvents","none"),i.fallbackOnBody&&M.body.appendChild(T)||E.appendChild(T),t=T.getBoundingClientRect(),l(T,"width",2*e.width-t.width),l(T,"height",2*e.height-t.height)}},_onDragStart:function(t,e){var n=t.dataTransfer,i=this.options;this._offUpEvents(),"clone"==L.pull&&(C=w.cloneNode(!0),l(C,"display","none"),E.insertBefore(C,w)),e?("touch"===e?(r(M,"touchmove",this._onTouchMove),r(M,"touchend",this._onDrop),r(M,"touchcancel",this._onDrop)):(r(M,"mousemove",this._onTouchMove),r(M,"mouseup",this._onDrop)),this._loopId=setInterval(this._emulateDragOver,50)):(n&&(n.effectAllowed="move",i.setData&&i.setData.call(this,n,w)),r(M,"drop",this),setTimeout(this._dragStarted,0))},_onDragOver:function(t){var i,o,r,s=this.el,a=this.options,c=a.group,u=c.put,f=L===c,g=a.sort;if(void 0!==t.preventDefault&&(t.preventDefault(),!a.dragoverBubble&&t.stopPropagation()),R=!0,L&&!a.disabled&&(f?g||(r=!E.contains(w)):L.pull&&u&&(L.name===c.name||u.indexOf&&~u.indexOf(L.name)))&&(void 0===t.rootEl||t.rootEl===this.el)){if(V(t,a,this.el),X)return;if(i=n(t.target,a.draggable,s),o=w.getBoundingClientRect(),r)return e(!0),void(C||S?E.insertBefore(w,C||S):g||E.appendChild(w));if(0===s.children.length||s.children[0]===T||s===t.target&&(i=h(s,t))){if(i){if(i.animated)return;m=i.getBoundingClientRect()}e(f),d(E,s,w,o,i,m)!==!1&&(w.contains(s)||(s.appendChild(w),x=s),this._animate(o,w),i&&this._animate(m,i))}else if(i&&!i.animated&&i!==w&&void 0!==i.parentNode[q]){N!==i&&(N=i,$=l(i),A=l(i.parentNode));var v,m=i.getBoundingClientRect(),y=m.right-m.left,b=m.bottom-m.top,k=/left|right|inline/.test($.cssFloat+$.display)||"flex"==A.display&&0===A["flex-direction"].indexOf("row"),D=i.offsetWidth>w.offsetWidth,j=i.offsetHeight>w.offsetHeight,O=(k?(t.clientX-m.left)/y:(t.clientY-m.top)/b)>.5,I=i.nextElementSibling,_=d(E,s,w,o,i,m);if(_!==!1){if(X=!0,setTimeout(p,30),e(f),1===_||-1===_)v=1===_;else if(k){var P=w.offsetTop,H=i.offsetTop;v=P===H?i.previousElementSibling===w&&!D||O&&D:H>P}else v=I!==w&&!j||O&&j;w.contains(s)||(v&&!I?s.appendChild(w):i.parentNode.insertBefore(w,v?I:i)),x=w.parentNode,this._animate(o,w),this._animate(m,i)}}}},_animate:function(t,e){var n=this.options.animation;if(n){var i=e.getBoundingClientRect();l(e,"transition","none"),l(e,"transform","translate3d("+(t.left-i.left)+"px,"+(t.top-i.top)+"px,0)"),e.offsetWidth,l(e,"transition","all "+n+"ms"),l(e,"transform","translate3d(0,0,0)"),clearTimeout(e.animated),e.animated=setTimeout(function(){l(e,"transition",""),l(e,"transform",""),e.animated=!1},n)}},_offUpEvents:function(){var t=this.el.ownerDocument;s(M,"touchmove",this._onTouchMove),s(t,"mouseup",this._onDrop),s(t,"touchend",this._onDrop),s(t,"touchcancel",this._onDrop)},_onDrop:function(e){var n=this.el,i=this.options;clearInterval(this._loopId),clearInterval(P.pid),clearTimeout(this._dragStartTimer),s(M,"mousemove",this._onTouchMove),this.nativeDraggable&&(s(M,"drop",this),s(n,"dragstart",this._onDragStart)),this._offUpEvents(),e&&(R&&(e.preventDefault(),!i.dropBubble&&e.stopPropagation()),T&&T.parentNode.removeChild(T),w&&(this.nativeDraggable&&s(w,"dragend",this),f(w),a(w,this.options.ghostClass,!1),a(w,this.options.chosenClass,!1),E!==x?(O=v(w,i.draggable),O>=0&&(u(null,x,"sort",w,E,j,O),u(this,E,"sort",w,E,j,O),u(null,x,"add",w,E,j,O),u(this,E,"remove",w,E,j,O))):(C&&C.parentNode.removeChild(C),w.nextSibling!==S&&(O=v(w,i.draggable),O>=0&&(u(this,E,"update",w,E,j,O),u(this,E,"sort",w,E,j,O)))),t.active&&(null!==O&&-1!==O||(O=j),u(this,E,"end",w,E,j,O),this.save()))),this._nulling()},_nulling:function(){E=w=x=T=S=C=k=D=I=_=R=O=N=$=L=t.active=null},handleEvent:function(t){var e=t.type;"dragover"===e||"dragenter"===e?w&&(this._onDragOver(t),o(t)):"drop"!==e&&"dragend"!==e||this._onDrop(t)},toArray:function(){for(var t,e=[],i=this.el.children,o=0,r=i.length,s=this.options;r>o;o++)t=i[o],n(t,s.draggable,this.el)&&e.push(t.getAttribute(s.dataIdAttr)||g(t));return e},sort:function(t){var e={},i=this.el;this.toArray().forEach(function(t,o){var r=i.children[o];n(r,this.options.draggable,i)&&(e[t]=r)},this),t.forEach(function(t){e[t]&&(i.removeChild(e[t]),i.appendChild(e[t]))})},save:function(){var t=this.options.store;t&&t.set(this)},closest:function(t,e){return n(t,e||this.options.draggable,this.el)},option:function(t,e){var n=this.options;return void 0===e?n[t]:(n[t]=e,void("group"===t&&Q(n)))},destroy:function(){var t=this.el;t[q]=null,s(t,"mousedown",this._onTapStart),s(t,"touchstart",this._onTapStart),this.nativeDraggable&&(s(t,"dragover",this),s(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),function(t){t.removeAttribute("draggable")}),Y.splice(Y.indexOf(this._onDragOver),1),this._onDrop(),this.el=t=null}},t.utils={on:r,off:s,css:l,find:c,is:function(t,e){return!!n(t,e,t)},extend:b,throttle:y,closest:n,toggleClass:a,index:v},t.create=function(e,n){return new t(e,n)},t.version="1.4.2",t})},{}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
